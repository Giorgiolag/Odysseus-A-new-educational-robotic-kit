<blocks app="Snap4Arduino 8.1.0
, http://snap4arduino.rocks" version="2"><palette><category name="Ody: Images, sounds, leds" color="31,245,0,1"/><category name="Ody: Youngsters" color="22,255,0,1"/><category name="Ody: Configuration" color="40,245,0,1"/><category name="Ody: Sensors" color="3,240,0,1"/><category name="Ody: Servos and DC Motors" color="40,245,0,1"/><category name="Move based on sensors" color="104,255,66,1"/></palette><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $Play-1.2-0-0-0 $tone-1.2-0-0-0 %&apos;freq&apos; $Hertz-1.2-0-0-0 $for-1.2-0-0-0 %&apos;dur&apos;" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>freq</l><l>dur</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0x0B,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ“º-1.7-0-0-0 $Print-1.2-0-0-0 %&apos;image&apos;" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%s"><options>image={&#xD;face={&#xD;Odysseas&#xD;Ungry&#xD;Smiling&#xD;In love&#xD;Winking&#xD;}&#xD;Movement={&#xD;Front&#xD;Back&#xD;Left&#xD;Right&#xD;}&#xD;Event={&#xD;Object detected&#xD;Color detected&#xD;}&#xD;Flipped</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>image</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x31] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x31] = function(board) {&#xD;  &#xD;           var image = 0; &#xD;           image = (board.currentBuffer[2] &amp; 0x7F);&#xD;           board.emit("RET_display", image);&#xD;        }&#xD;    };&#xD;if (!board.i2cEnabled) {&#xD;    board.i2cConfig();&#xD;    board.i2cEnabled = true;&#xD;}&#xD;var all_OK = 0;&#xD;if (image == "Odysseas")&#xD;{&#xD;   var to_send = 3;&#xD;   all_OK = 1;&#xD;}&#xD;if (image == "Ungry")&#xD;{&#xD;  var to_send = 4;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Smiling")&#xD;{&#xD;  var to_send = 5;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "In love")&#xD;{&#xD;  var to_send = 6;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Winking")&#xD;{&#xD;  var to_send = 7;&#xD;  all_OK = 1;&#xD;}&#xD;&#xD;if (image == "Front")&#xD;{&#xD;  var to_send = 8;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Back")&#xD;{&#xD;  var to_send = 9;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Left")&#xD;{&#xD;  var to_send = 10;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Right")&#xD;{&#xD;  var to_send = 11;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Object detected")&#xD;{&#xD;  var to_send = 21;&#xD;  all_OK = 1;&#xD;}&#xD;if (image == "Color detected")&#xD;{&#xD;  var to_send = 22;&#xD;  all_OK = 1;&#xD;}&#xD;&#xD;if (image == "Flipped")&#xD;{&#xD;  var to_send = 27;&#xD;  all_OK = 1;&#xD;}&#xD;&#xD;if (all_OK == 1)&#xD;{&#xD;    board["RET_disply"] = null;&#xD;    board.once("RET_display", function(data){board["RET_display"] = data;});&#xD;    var sdata =[0xF0,0x31,to_send,	0xF7];&#xD;    board.transport.write(new Buffer(sdata));&#xD;}&#xD;else&#xD;{&#xD;   throw new Error ("please choose something to print");&#xD;} &#xD;</l></block><list><block var="image"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_display");&#xD;return (board["RET_display"] != null);</l></block><list></list></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ’¡-1.7-0-0-0 %&apos;led&apos; $led-1.2-0-0-0 %&apos;status&apos;" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>1st&#xD;2nd</options></input><input type="%s"><options>On&#xD;Off&#xD;Blink</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>status</l><l>led</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x40] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x40] = function(board) {&#xD;  &#xD;           var new_led_status = 0; &#xD;           new_led_status = (board.currentBuffer[2] &amp; 0x7F);&#xD;           board.emit("RET_led_status", new_led_status);&#xD;        }&#xD;    };&#xD;var all_OK = 0;&#xD;if (!board.i2cEnabled) {&#xD;    board.i2cConfig();&#xD;    board.i2cEnabled = true;&#xD;}&#xD;if (led == "2nd")&#xD;{&#xD;   if (status == "On")&#xD;   {&#xD;      var to_send = 16;&#xD;      all_OK = 1;&#xD;   }&#xD;   if (status == "Off")&#xD;   {&#xD;     var to_send = 15;&#xD;     all_OK = 1;&#xD;   }&#xD;   if (status == "Blink")&#xD;   {&#xD;     var to_send = 17;&#xD;     all_OK = 1;&#xD;   }&#xD;}&#xD;if (led == "1st")&#xD;{&#xD;   if (status == "On")&#xD;   {&#xD;      var to_send = 18;&#xD;      all_OK = 1;&#xD;   }&#xD;   if (status == "Off")&#xD;   {&#xD;     var to_send = 19;&#xD;     all_OK = 1;&#xD;   }&#xD;   if (status == "Blink")&#xD;   {&#xD;     var to_send = 20;&#xD;     all_OK = 1;&#xD;   }&#xD;}&#xD;if (all_OK == 1)&#xD;{&#xD;   board["RET_led_status"] = null;&#xD;   board.once("RET_led_status", function(data){board["RET_led_status"] = data;});&#xD;   var sdata =[0xF0,0x40,to_send,	0xF7];&#xD;   board.transport.write(new Buffer(sdata));&#xD;}&#xD;else&#xD;{&#xD;  throw new Error("you forgot to choose something");&#xD;}&#xD;</l></block><list><block var="status"/><block var="led"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_led_status");&#xD;return (board["RET_led_status"] != null);</l></block><list></list></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $Play-1.2-0-0-0 %&apos;song&apos;" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>Green Sleeves&#xD;Marry Had a Little Lamb&#xD;Happy Birthday&#xD;Star Wars&#xD;Chariots of Fire</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>song</l></list><l>//Create blocs wit vars: pin, freq (frequency 0-65535 Hz) and dur (duration 0-4294967295 milliseconds)&#xD;var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;var all_OK = 0;&#xD;var song_pos;&#xD;if (song === "Green Sleeves")&#xD;{&#xD;    song_pos = 0;&#xD;    all_OK = 1;&#xD;}&#xD;if (song === "Marry Had a Little Lamb")&#xD;{&#xD;    song_pos = 1;&#xD;    all_OK = 1;&#xD;}&#xD;if (song === "Happy Birthday")&#xD;{&#xD;    song_pos = 2;&#xD;    all_OK = 1;&#xD;}&#xD;if (song === "Star Wars")&#xD;{&#xD;    song_pos = 3;&#xD;    all_OK = 1;&#xD;}&#xD;if (song === "Chariots of Fire")&#xD;{&#xD;    song_pos = 4;&#xD;    all_OK = 1;&#xD;}&#xD; &#xD;var data =[0xF0, //START_SYSEX&#xD;		0x0D,  //Tone Command&#xD;		song_pos,&#xD;		0xF7  //END_SYSEX&#xD;];&#xD;if (all_OK == 1)&#xD;   board.transport.write(new Buffer(data));&#xD;else&#xD;   throw new Error("you have to choose a song")</l></block><list><block var="song"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-1-94-255-71 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Step-1.2-0-0-0 $â­³-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>time</l></list></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x1B] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x1B] = function(board) {&#xD;       &#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14) | ((board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 21) | ((board.currentBuffer[6] &amp; 0x7F) &lt;&lt; 28);&#xD;            board.emit("STEPF", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["STEPF"] = null;&#xD;board.once("STEPF", function(data){board["STEPF"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x1B,&#xD;    11,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("STEPF");&#xD;return (board["STEPF"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>time</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("STEPF");&#xD;return board["STEPF"];</l></block><list></list></block></block><block s="doWait"><block s="reportQuotient"><block var="time"/><l>1000</l></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x35,&#xD;    2,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWait"><l>0.001</l></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Step-1.2-0-0-0 $â­±-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>time</l></list></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x1B] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x1B] = function(board) {&#xD;       &#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14) | ((board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 21) | ((board.currentBuffer[6] &amp; 0x7F) &lt;&lt; 28);&#xD;            board.emit("STEPF", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["STEPF"] = null;&#xD;board.once("STEPF", function(data){board["STEPF"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x1B,&#xD;    1,&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("STEPF");&#xD;return (board["STEPF"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>time</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("STEPF");&#xD;return board["STEPF"];</l></block><list></list></block></block><block s="doWait"><block s="reportQuotient"><block var="time"/><l>1000</l></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x35,&#xD;    2,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWait"><l>0.001</l></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $turnForward-2-255-0-0 $90-1-0-0-0 $degrees-1-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>time</l></list></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x1B] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x1B] = function(board) {&#xD;       &#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14) | ((board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 21) | ((board.currentBuffer[6] &amp; 0x7F) &lt;&lt; 28);&#xD;            board.emit("STEPF", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["STEPF"] = null;&#xD;board.once("STEPF", function(data){board["STEPF"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x1B,&#xD;    41,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("STEPF");&#xD;return (board["STEPF"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>time</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("STEPF");&#xD;return board["STEPF"];</l></block><list></list></block></block><block s="doWait"><block s="reportQuotient"><block var="time"/><l>1000</l></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x35,&#xD;    2,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWait"><l>0.001</l></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $turnBack-2-255-0-0 $90-1-0-0-0 $degrees-1-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>time</l></list></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x1B] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x1B] = function(board) {&#xD;       &#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14) | ((board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 21) | ((board.currentBuffer[6] &amp; 0x7F) &lt;&lt; 28);&#xD;            board.emit("STEPF", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["STEPF"] = null;&#xD;board.once("STEPF", function(data){board["STEPF"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x1B,&#xD;    31,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("STEPF");&#xD;return (board["STEPF"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>time</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("STEPF");&#xD;return board["STEPF"];</l></block><list></list></block></block><block s="doWait"><block s="reportQuotient"><block var="time"/><l>1000</l></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x35,&#xD;    2,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWait"><l>0.001</l></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $â–¦-1.7-0-0-0 $grid-0.8-0-0-0 $START-1.2-0-0-0 $fixing-1-0-0-0 %&apos;direction&apos; $step-1-0-0-0 $for-1-0-0-0 %&apos;steps&apos; $steps-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt">forward<options>forward&#xD;backward</options></input><input type="%n">10<options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>direction</l><l>steps</l></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (direction == "forward")&#xD;   direction_to_send = 1;&#xD;else&#xD;   direction_to_send = 11;&#xD;  &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x0E,  //grid Command&#xD;        		direction_to_send,     // mode&#xD;          steps,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="direction"/><block var="steps"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $â–¦-1.7-0-0-0 $grid-0.8-0-0-0 $END-1.2-0-0-0 $fixing-1-0-0-0 $step-1-0-0-0 $or-1-0-0-0 $turn-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;           &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x0E,  //grid Command&#xD;        		2,     // mode&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $â–¦-1.7-0-0-0 $grid-0.8-0-0-0 $START-1.2-0-0-0 $fix-1-0-0-0 %&apos;direction&apos; $turn-1-0-0-0 $and-1-0-0-0 %&apos;steps&apos; $360-1-0-0-0 $o-0.6-0-0-0 $turns-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt">left<options>left&#xD;right</options></input><input type="%n">10<options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>direction</l><l>steps</l></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if ((steps &lt;=0) || (steps &gt;10))&#xD;    throw new Error("you need to enter number of turns (1-10)");&#xD;if (direction == "left")&#xD;   direction_to_send = 31;&#xD;else&#xD;   direction_to_send = 41;    &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x0E,  //grid Command&#xD;        		direction_to_send,     // mode&#xD;          steps,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="direction"/><block var="steps"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Obstacle-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;sensor_number&apos;" type="predicate" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>analog_pin</l></list></block><block s="doDeclareVariables"><list><l>obstacle</l></list></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>1</l></block><script><block s="doSetVar"><l>analog_pin</l><l>0</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>2</l></block><script><block s="doSetVar"><l>analog_pin</l><l>1</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>3</l></block><script><block s="doSetVar"><l>analog_pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>4</l></block><script><block s="doSetVar"><l>analog_pin</l><l>3</l></block></script></block><block s="doIfElse"><block s="reportGreaterThan"><block s="reportAnalogReading"><block var="analog_pin"/></block><l>400</l></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘€-1.7-0-0-0 $sensors-0.8-0-0-0 $FIX-1.2-0-0-0 %&apos;colour&apos;" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt">choose colour<options>Red&#xD;Green&#xD;Blue&#xD;Yellow&#xD;Cyan&#xD;Magenta&#xD;Floor&#xD;Black&#xD;White</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>colour</l></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (colour == "choose colour")&#xD;    throw new Error("you need to choose a colour");&#xD;var colour_number;&#xD;if (colour == "Red")&#xD;   colour_number = 1;&#xD;if (colour == "Green")&#xD;   colour_number = 2;&#xD;if (colour == "Blue")&#xD;   colour_number = 3;&#xD;if (colour == "Cyan")&#xD;   colour_number = 4;&#xD;if (colour == "Yellow")&#xD;   colour_number = 5;&#xD;if (colour == "Magenta")&#xD;   colour_number = 6;&#xD;if (colour == "Floor")&#xD;   colour_number = 7;&#xD;if (colour == "Black")&#xD;   colour_number = 8; &#xD;if (colour == "White")&#xD;   colour_number = 9;       &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x1E,&#xD;        		colour_number,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="colour"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘€-1.7-0-0-0 $sensors-0.8-0-0-0 $activate-1-0-0-0 $/-1.5-0-0-0 $inactivate-1-0-0-0 $colors-1-0-0-0 $nl - - - - - - - - - - - - - - - - - - $nl $red-1-255-0-0 %&apos;red&apos; $green-1-0-255-0 %&apos;green&apos; $blue-1-0-0-255 %&apos;blue&apos; $nl - - - - - - - - - - - - - - - - - - $nl $cyan-1-0-255-255 %&apos;cyan&apos; $yellow-1-255-255-0 %&apos;yellow&apos; $magenta-1-255-0-255 %&apos;magenta&apos; $nl - - - - - - - - - - - - - - - - - - $nl $floor-1-100-100-100 %&apos;floor&apos; $black-1-0-0-0 %&apos;black&apos; $white-1 %&apos;white&apos;" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input><input type="%b">true</input></inputs><script><block s="doDeclareVariables"><list><l>colours</l><l>colours2</l></list></block><block s="doSetVar"><l>colours</l><l>0</l></block><block s="doSetVar"><l>colours2</l><l>0</l></block><block s="doIf"><block var="red"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>1</l></list></block></block></script></block><block s="doIf"><block var="green"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>2</l></list></block></block></script></block><block s="doIf"><block var="blue"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>4</l></list></block></block></script></block><block s="doIf"><block var="cyan"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>8</l></list></block></block></script></block><block s="doIf"><block var="yellow"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>16</l></list></block></block></script></block><block s="doIf"><block var="magenta"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>32</l></list></block></block></script></block><block s="doIf"><block var="floor"/><script><block s="doSetVar"><l>colours</l><block s="reportVariadicSum"><list><block var="colours"/><l>64</l></list></block></block></script></block><block s="doIf"><block var="black"/><script><block s="doSetVar"><l>colours2</l><block s="reportVariadicSum"><list><block var="colours2"/><l>1</l></list></block></block></script></block><block s="doIf"><block var="white"/><script><block s="doSetVar"><l>colours2</l><block s="reportVariadicSum"><list><block var="colours2"/><l>2</l></list></block></block></script></block><block s="doRun"><block s="reportJSFunction"><list><l>colours</l><l>colours2</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x1F,&#xD;          colours,&#xD;          colours2, &#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="colours"/><block var="colours2"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸš™-1.7-0-0-0 $set-1-0-0-0 $dc-1-0-0-0 $motor-1-0-0-0 %&apos;motor_number&apos; $to-1-0-0-0 %&apos;direction&apos; $at-1-0-0-0 $speed-1-0-0-0 %&apos;speed&apos; $refine-1-0-0-0 %&apos;ref_direction&apos; $value-1-0-0-0 %&apos;value&apos;" type="command" category="Ody: Servos and DC Motors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2</options></input><input type="%s"><options>Clockwise&#xD;Counterclockwise&#xD;none</options></input><input type="%n">10<options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>upwards&#xD;downwards&#xD;none</options></input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>motor_number</l><l>direction</l><l>speed</l><l>ref_direction</l><l>value</l></list><l>var direction_to_send, ref_direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (value &lt;0 || value&gt;25)&#xD;   throw new Error("value must be between 0 and 20")&#xD;if (speed &lt;0 || speed &gt;10)&#xD;   throw new Error("speed must be between 0 and 10")&#xD;if (direction == "Clockwise")&#xD;       direction_to_send = 0; &#xD;else if (direction == "Counterclockwise")&#xD;       direction_to_send = 1; &#xD;else&#xD;       direction_to_send = 2;&#xD;&#xD;if (ref_direction == "upwards")&#xD;       ref_direction_to_send = 1; &#xD;else if (ref_direction == "downwards")&#xD;       ref_direction_to_send = 2; &#xD;else&#xD;       ref_direction_to_send = 0;&#xD;&#xD;          &#xD;var data =[0xF0, //START_SYSEX&#xD;        		0x0C,  //dc motors Command&#xD;        		motor_number,&#xD;        		direction_to_send,&#xD;        		speed,&#xD;          ref_direction_to_send,&#xD;          value,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="motor_number"/><block var="direction"/><block var="speed"/><block var="ref_direction"/><block var="value"/></list></block><block s="doWait"><l>0.001</l></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;sensor_number&apos;" type="predicate" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>analog_pin</l></list></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>1</l></block><script><block s="doSetVar"><l>analog_pin</l><l>0</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>2</l></block><script><block s="doSetVar"><l>analog_pin</l><l>1</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>3</l></block><script><block s="doSetVar"><l>analog_pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="sensor_number"/><l>4</l></block><script><block s="doSetVar"><l>analog_pin</l><l>3</l></block></script></block><block s="doIfElse"><block s="reportGreaterThan"><block s="reportAnalogReading"><block var="analog_pin"/></block><l>400</l></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></block-definition><block-definition s="$Follow-1-0-0-0 $track-1-0-0-0 $on-1-0-0-0 $servo-1-0-0-0 $wheels-1-0-0-0 %&apos;servo1&apos; $(left)-1-0-0-0 $and-1-0-0-0 %&apos;servo2&apos; $(right)-1-0-0-0 $nl $based-1-0-0-0 $on-1-0-0-0 %&apos;left_sensor&apos; $(left-1-0-0-0 $tracker)-1-0-0-0 $and-1-0-0-0 %&apos;right_sensor&apos; $(right-1-0-0-0 $tracker)-1-0-0-0 $nl $with-1-0-0-0 $speed-1-0-0-0 ${-1.2-0-0-0 $forward-1-0-0-0 %&apos;fspeed&apos; $|-1.2-0-0-0 $left-1-0-0-0 $turn-1-0-0-0 %&apos;lspeed&apos; $|-1.2-0-0-0 $right-1-0-0-0 $turn-1-0-0-0 %&apos;rspeed&apos; $}-1.2-0-0-0 $nl $until-1-0-0-0 $obstacle-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 %&apos;event&apos;" type="command" category="Move based on sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input></inputs><script><block s="doDeclareVariables"><list><l>left_tracker</l><l>right_tracker</l><l>condition</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>left_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>left_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>left_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>left_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>right_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>right_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>right_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>right_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doUntil"><block s="reportEquals"><block var="condition"/><l>TRUE</l></block><script><block s="doIfElse"><block s="reportEquals"><block var="event"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>condition</l><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><l>1</l></custom-block></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="event"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>condition</l><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><l>2</l></custom-block></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="event"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>condition</l><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><l>3</l></custom-block></block></script><script><block s="doSetVar"><l>condition</l><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><l>4</l></custom-block></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script></script><script></script></block></script><script></script></block></script></block></script></block-definition><block-definition s="$Follow-1-0-0-0 $track-1-0-0-0 $on-1-0-0-0 $servo-1-0-0-0 $wheels-1-0-0-0 %&apos;servo1&apos; $(left)-1-0-0-0 $and-1-0-0-0 %&apos;servo2&apos; $(right)-1-0-0-0 $nl $based-1-0-0-0 $on-1-0-0-0 %&apos;left_sensor&apos; $(left-1-0-0-0 $tracker)-1-0-0-0 $and-1-0-0-0 %&apos;right_sensor&apos; $(right-1-0-0-0 $tracker)-1-0-0-0 $nl $move-1-0-0-0 $forward-1-0-0-0 $with-1-0-0-0 $left-1-0-0-0 $wheel-1-0-0-0 $spin-1-0-0-0 %&apos;fdirection&apos; $and-1-0-0-0 $right-1-0-0-0 $whell-1-0-0-0 $spin-1-0-0-0 %&apos;fdirection2&apos; $nl $speed-1-0-0-0 ${-1.2-0-0-0 $forward-1-0-0-0 %&apos;fspeed&apos; $|-1.2-0-0-0 $left-1-0-0-0 $turn-1-0-0-0 %&apos;lspeed&apos; $|-1.2-0-0-0 $right-1-0-0-0 $turn-1-0-0-0 %&apos;rspeed&apos; $}-1.2-0-0-0 $nl $until-1-0-0-0 $value-1-0-0-0 $of-1-0-0-0 $ultrasonic-1-0-0-0 $sensor-1-0-0-0 $is-1-0-0-0 $less-1-0-0-0 $than-1-0-0-0 %&apos;value&apos; $cm-1-0-0-0" type="command" category="Move based on sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt">clockwise<options>clockwise&#xD;counterclockwise</options></input><input type="%txt">clockwise<options>clockwise&#xD;counterclockwise</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>left_tracker</l><l>right_tracker</l><l>condition</l><l>final_lspeed</l><l>final_rspeed</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>left_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>left_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>left_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>left_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>right_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>right_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>right_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>right_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doUntil"><block s="reportLessThan"><l></l><block var="value"/></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script></script><script></script></block></script><script></script></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $activated-1-0-0-0 $/-1-0-0-0 $inactivated-1-0-0-0 $colors-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>red</l><l>green</l><l>blue</l><l>cyan</l><l>yellow</l><l>magenta</l><l>floor</l><l>black</l><l>white</l><l>colors</l><l>colors_bytes</l></list></block><block s="doSetVar"><l>colors</l><block s="reportNewList"><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x20] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x20] = function(board) {&#xD;        var colors = ((board.currentBuffer[2] &lt;&lt; 7) &amp;  0x80) |  board.currentBuffer[3]; &#xD;        board.emit("RET_C_A_I", colors);&#xD;    };&#xD;}&#xD;board["RET_C_A_I"] = null;&#xD;board.once("RET_C_A_I", function(data){board["RET_C_A_I"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x20,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_C_A_I");&#xD;return (board["RET_C_A_I"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>colors_bytes</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_C_A_I")&#xD;return board["RET_C_A_I"].toString(10);</l></block><list></list></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Red = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Red = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Green = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Green = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Blue = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Blue = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Cyan = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Cyan = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Yellow = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Yellow = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Magenta = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Magenta = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Floor = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Floor = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Black = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Black = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doSetVar"><l>colors_bytes</l><block s="reportQuotient"><block s="reportDifference"><block var="colors_bytes"/><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block></block><l>2</l></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportModulus"><block var="colors_bytes"/><l>2</l></block><l>0</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>White = </l><l>OFF</l></list></block><block var="colors"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>White = </l><l>ON</l></list></block><block var="colors"/></block></script></block><block s="doReport"><block var="colors"/></block></script></block-definition><block-definition s="$Follow-1-0-0-0 $track-1-0-0-0 $on-1-0-0-0 $servo-1-0-0-0 $wheels-1-0-0-0 %&apos;servo1&apos; $(left)-1-0-0-0 $and-1-0-0-0 %&apos;servo2&apos; $(right)-1-0-0-0 $nl $based-1-0-0-0 $on-1-0-0-0 %&apos;left_sensor&apos; $(left-1-0-0-0 $tracker)-1-0-0-0 $and-1-0-0-0 %&apos;right_sensor&apos; $(right-1-0-0-0 $tracker)-1-0-0-0 $nl $with-1-0-0-0 $speed-1-0-0-0 ${-1.2-0-0-0 $forward-1-0-0-0 %&apos;fspeed&apos; $|-1.2-0-0-0 $left-1-0-0-0 $turn-1-0-0-0 %&apos;lspeed&apos; $|-1.2-0-0-0 $right-1-0-0-0 $turn-1-0-0-0 %&apos;rspeed&apos; $}-1.2-0-0-0 $nl $until-1-0-0-0 $value-1-0-0-0 $of-1-0-0-0 $(sharp)-1-0-0-0 $IR-1-0-0-0 $distance-1-0-0-0 $sensor-1-0-0-0 $at-1-0-0-0 %&apos;slot&apos; $is-1-0-0-0 $less-1-0-0-0 $than-1-0-0-0 %&apos;value&apos; $cm-1-0-0-0" type="command" category="Move based on sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>left_tracker</l><l>right_tracker</l><l>condition</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>left_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>left_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>left_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>left_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>right_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>right_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>right_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>right_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doUntil"><block s="reportEquals"><block var="condition"/><l>TRUE</l></block><script><block s="doIfElse"><block s="reportEquals"><block var="slot"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>condition</l><block s="reportLessThan"><l></l><block var="value"/></block></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="slot"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>condition</l><block s="reportLessThan"><l></l><block var="value"/></block></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="slot"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>condition</l><block s="reportLessThan"><l></l><block var="value"/></block></block></script><script><block s="doSetVar"><l>condition</l><block s="reportLessThan"><l></l><block var="value"/></block></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script></script><script></script></block></script><script></script></block></script></block></script></block-definition><block-definition s="$Follow-1-0-0-0 $track-1-0-0-0 $on-1-0-0-0 $servo-1-0-0-0 $wheels-1-0-0-0 %&apos;servo1&apos; $(left)-1-0-0-0 $and-1-0-0-0 %&apos;servo2&apos; $(right)-1-0-0-0 $nl $based-1-0-0-0 $on-1-0-0-0 %&apos;left_sensor&apos; $(left-1-0-0-0 $tracker)-1-0-0-0 $and-1-0-0-0 %&apos;right_sensor&apos; $(right-1-0-0-0 $tracker)-1-0-0-0 $nl $with-1-0-0-0 $speed-1-0-0-0 ${-1.2-0-0-0 $forward-1-0-0-0 %&apos;fspeed&apos; $|-1.2-0-0-0 $left-1-0-0-0 $turn-1-0-0-0 %&apos;lspeed&apos; $|-1.2-0-0-0 $right-1-0-0-0 $turn-1-0-0-0 %&apos;rspeed&apos; $}-1.2-0-0-0 $nl $until-1-0-0-0 $color-1-0-0-0 $detected-1-0-0-0 $is-1-0-0-0 $equal-1-0-0-0 $to-1-0-0-0 %&apos;value&apos; $with-1-0-0-0 $similarity-1-0-0-0 $frame-1-0-0-0 %&apos;frame&apos; $(0-1-0-0-0 $to-1-0-0-0 $127)-1-0-0-0" type="command" category="Move based on sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>Red&#xD;Green&#xD;Blue&#xD;Cyan&#xD;Yellow&#xD;Magenta&#xD;Floor&#xD;Black&#xD;White&#xD;Unknown</options></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>left_tracker</l><l>right_tracker</l><l>condition</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>left_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>left_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>left_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>left_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>right_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>right_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>right_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>right_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doUntil"><block s="reportEquals"><l></l><block var="value"/></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script></script><script></script></block></script><script></script></block><block s="doWait"><l>0.1</l></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸš™-1.7-0-0-0 $set-1-0-0-0 $servo-1-0-0-0 %&apos;number&apos; $to-1-0-0-0 %&apos;movement&apos; $at-1-0-0-0 $speed-1-0-0-0 %&apos;speed&apos; $refine-1-0-0-0 %&apos;direction&apos; $value-1-0-0-0 %&apos;value&apos; $(0-1-0-0-0 $to-1-0-0-0 $25)-1-0-0-0" type="command" category="Ody: Servos and DC Motors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>clockwise&#xD;counter-clockwise&#xD;stopped</options></input><input type="%n">10<options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s">none<options>upwards&#xD;downwards&#xD;none</options></input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>value</l><l>speed</l></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;           &#xD;if (value &lt;0 || value&gt;25)&#xD;   throw new Error("value must be betwwen 0 and 25")&#xD;&#xD;if (speed &lt;0 || speed &gt;10)&#xD;   throw new Error("speed must be betwwen 0 and 10")</l></block><list><block var="value"/><block var="speed"/></list></block><block s="doDeclareVariables"><list><l>modified_speed</l></list></block><block s="doDeclareVariables"><list><l>digital_pin</l></list></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>1</l></block><script><block s="doSetVar"><l>digital_pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>2</l></block><script><block s="doSetVar"><l>digital_pin</l><l>4</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>3</l></block><script><block s="doSetVar"><l>digital_pin</l><l>7</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>4</l></block><script><block s="doSetVar"><l>digital_pin</l><l>8</l></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="movement"/><l>stopped</l></block><script><block s="servoWrite"><block var="digital_pin"/><l><option>stopped</option></l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="movement"/><l>clockwise</l></block><script><block s="doIfElse"><block s="reportEquals"><block var="direction"/><l>upwards</l></block><script><block s="doSetVar"><l>modified_speed</l><block s="reportVariadicSum"><list><block s="reportVariadicSum"><list><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></list></block><block var="value"/></list></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="direction"/><l>downwards</l></block><script><block s="doSetVar"><l>modified_speed</l><block s="reportDifference"><block s="reportVariadicSum"><list><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></list></block><block var="value"/></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script><script><block s="doSetVar"><l>modified_speed</l><block s="reportVariadicSum"><list><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></list></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script></block></script></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="direction"/><l>upwards</l></block><script><block s="doSetVar"><l>modified_speed</l><block s="reportDifference"><block s="reportDifference"><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></block><block var="value"/></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="direction"/><l>downwards</l></block><script><block s="doSetVar"><l>modified_speed</l><block s="reportVariadicSum"><list><block s="reportDifference"><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></block><block var="value"/></list></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script><script><block s="doSetVar"><l>modified_speed</l><block s="reportDifference"><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script></block></script></block></script></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $move-1.2-0-0-0 $â¯­-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x34,&#xD;    1,&#xD;    0,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x35,&#xD;    1,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $move-1.2-0-0-0 $â¯¯-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x34,&#xD;    11,&#xD;    0,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x34,&#xD;    31,&#xD;    1,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x34,&#xD;    41,&#xD;    1,&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script></block-definition><block-definition s="$Follow-1-0-0-0 $track-1-0-0-0 $on-1-0-0-0 $servo-1-0-0-0 $wheels-1-0-0-0 %&apos;servo1&apos; $(left)-1-0-0-0 $and-1-0-0-0 %&apos;servo2&apos; $(right)-1-0-0-0 $nl $based-1-0-0-0 $on-1-0-0-0 %&apos;left_sensor&apos; $(left-1-0-0-0 $tracker)-1-0-0-0 $and-1-0-0-0 %&apos;right_sensor&apos; $(right-1-0-0-0 $tracker)-1-0-0-0 $nl $with-1-0-0-0 $speed-1-0-0-0 ${-1.2-0-0-0 $forward-1-0-0-0 %&apos;fspeed&apos; $|-1.2-0-0-0 $left-1-0-0-0 $turn-1-0-0-0 %&apos;lspeed&apos; $|-1.2-0-0-0 $right-1-0-0-0 $turn-1-0-0-0 %&apos;rspeed&apos; $}-1.2-0-0-0 $nl $until-1-0-0-0 $crossroad-1-0-0-0" type="command" category="Move based on sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%s"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input></inputs><script><block s="doDeclareVariables"><list><l>left_tracker</l><l>right_tracker</l><l>condition</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>left_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>left_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="left_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>left_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>left_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 1</l></block><script><block s="doSetVar"><l>right_tracker</l><l>1</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 2</l></block><script><block s="doSetVar"><l>right_tracker</l><l>2</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="right_sensor"/><l>sensor slot 3</l></block><script><block s="doSetVar"><l>right_tracker</l><l>3</l></block></script><script><block s="doSetVar"><l>right_tracker</l><l>4</l></block></script></block></script></block></script></block><block s="doUntil"><block s="reportEquals"><block var="condition"/><l>TRUE</l></block><script><block s="doSetVar"><l>condition</l><block s="reportAnd"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block></block></block><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><block s="doIfElse"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script></script><script></script></block></script><script></script></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘€-1.7-0-0-0 $sensors-0.8-0-0-0 $STORE-1.2-0-0-0 $slots-1-0-0-0 $of-1-0-0-0 $line_trackers-1-0-0-0 $nl $SET-1.2-0-0-0 $left-1-0-0-0 $tracker-1-0-0-0 $as-1-0-0-0 %&apos;left_tracker_slot&apos; $SET-1.2-0-0-0 $right-1-0-0-0 $tracker-1-0-0-0 $as-1-0-0-0 %&apos;right_tracker_slot&apos;" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input><input type="%txt"><options>sensor slot 1&#xD;sensor slot 2&#xD;sensor slot 3&#xD;sensor slot 4</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>left_tracker_slot</l><l>right_tracker_slot</l></list><l>var left_tracker_slot_to_send, right_tracker_slot_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;//-----------------------------------------------------&#xD;if (left_tracker_slot == "sensor slot 1")&#xD;   left_tracker_slot_to_send = 1;&#xD;else if (left_tracker_slot == "sensor slot 2")&#xD;   left_tracker_slot_to_send = 2;&#xD;else if (left_tracker_slot == "sensor slot 3")&#xD;   left_tracker_slot_to_send = 3;&#xD;else&#xD;   left_tracker_slot_to_send = 4;&#xD;//-----------------------------------------------------&#xD;if (right_tracker_slot == "sensor slot 1")&#xD;   right_tracker_slot_to_send = 1;&#xD;else if (right_tracker_slot == "sensor slot 2")&#xD;   right_tracker_slot_to_send = 2;&#xD;else if (right_tracker_slot == "sensor slot 3")&#xD;   right_tracker_slot_to_send = 3;&#xD;else&#xD;   right_tracker_slot_to_send = 4;&#xD;      &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x38,  //grid Command &#xD;       		 left_tracker_slot_to_send+0,&#xD;          right_tracker_slot_to_send+0,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="left_tracker_slot"/><block var="right_tracker_slot"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $follow-1.2-0-0-0 $track-1.2-0-0-0 $arrowRight-3-255-0-0 $ã€°-3-0-0-0 $square-1.2-255-0-0 $ðŸš§-2-1-0-0-0 $|-2-0-0-0 $square-1.2-255-0-0 $Y-2-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x39] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x39] = function(board) {&#xD;        var trackers = board.currentBuffer[2]  | (board.currentBuffer[3] &lt;&lt; 8) ;&#xD;        board.emit("trackers", trackers);&#xD;    };&#xD;}&#xD;board["trackers"] = null;&#xD;board.once("trackers", function(data){board["trackers"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x39,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("trackers");&#xD;return (board["trackers"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>result</l><l>left_tracker</l><l>right_tracker</l></list></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("trackers")&#xD;return board["trackers"].toString(10);</l></block><list></list></block></block><block s="doSetVar"><l>left_tracker</l><block s="reportModulus"><block var="result"/><l>256</l></block></block><block s="doSetVar"><l>right_tracker</l><block s="reportRound"><block s="reportQuotient"><block var="result"/><l>256</l></block></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x3B] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x3B] = function(board) {&#xD;        var obstacle_distance = board.currentBuffer[2] ;&#xD;        board.emit("ob_dis", obstacle_distance);&#xD;    };&#xD;}&#xD;board["ob_dis"] = null;&#xD;board.once("ob_dis", function(data){board["ob_dis"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x3B,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("ob_dis");&#xD;return (board["ob_dis"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>stop_distance</l></list></block><block s="doSetVar"><l>stop_distance</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("ob_dis")&#xD;return board["ob_dis"].toString(10);</l></block><list></list></block></block><block s="doUntil"><block s="reportOr"><block s="reportAnd"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block><block s="reportLessThan"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Ultrasonic-1-0-0-0 $Sensor-1-0-0-0 $Measurement-1-0-0-0"></custom-block><block var="stop_distance"/></block></block><script><block s="doIfElse"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block><script><block s="doIfElse"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $move-1.2-0-0-0 $â¯­-3-255-0-0"></custom-block></script><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block></script><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block></script></block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0"></custom-block><block s="doWaitUntil"><block s="reportOr"><block s="reportAnd"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block><block s="reportLessThan"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Ultrasonic-1-0-0-0 $Sensor-1-0-0-0 $Measurement-1-0-0-0"></custom-block><block var="stop_distance"/></block></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘€-1.7-0-0-0 $sensors-0.8-0-0-0 $STORE-1.2-0-0-0 $minimum-1-0-0-0 $distance-1-0-0-0 $from-1-0-0-0 $obstacle-1-0-0-0 $(ultrasonic-1-0-0-0 $sensor)-1-0-0-0 $nl $SET-1.2-0-0-0 $minimum-1-0-0-0 $distance-1-0-0-0 $as-1-0-0-0 %&apos;distance&apos; $cm-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>distance</l></list><l>var left_tracker_slot_to_send, right_tracker_slot_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;//-----------------------------------------------------&#xD;if (distance&gt;30)&#xD;   throw new error("distance must be up to 30 cm")&#xD;//-----------------------------------------------------&#xD;&#xD;      &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x3A,  //grid Command &#xD;       		 distance,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="distance"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $back-1.2-0-0-0 $âŸ²-3-255-0-0 $ã€°-3-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x39] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x39] = function(board) {&#xD;        var trackers = board.currentBuffer[2]  | (board.currentBuffer[3] &lt;&lt; 8) ;&#xD;        board.emit("trackers", trackers);&#xD;    };&#xD;}&#xD;board["trackers"] = null;&#xD;board.once("trackers", function(data){board["trackers"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x39,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("trackers");&#xD;return (board["trackers"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>result</l><l>left_tracker</l><l>right_tracker</l></list></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("trackers")&#xD;return board["trackers"].toString(10);</l></block><list></list></block></block><block s="doSetVar"><l>left_tracker</l><block s="reportModulus"><block var="result"/><l>256</l></block></block><block s="doSetVar"><l>right_tracker</l><block s="reportRound"><block s="reportQuotient"><block var="result"/><l>256</l></block></block></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>FALSE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>TRUE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>TRUE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0"></custom-block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Turn-1.2-0-0-0 $back-1.2-0-0-0 $âŸ³-3-255-0-0 $ã€°-3-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x39] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x39] = function(board) {&#xD;        var trackers = board.currentBuffer[2]  | (board.currentBuffer[3] &lt;&lt; 8) ;&#xD;        board.emit("trackers", trackers);&#xD;    };&#xD;}&#xD;board["trackers"] = null;&#xD;board.once("trackers", function(data){board["trackers"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x39,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("trackers");&#xD;return (board["trackers"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>result</l><l>left_tracker</l><l>right_tracker</l></list></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("trackers")&#xD;return board["trackers"].toString(10);</l></block><list></list></block></block><block s="doSetVar"><l>left_tracker</l><block s="reportModulus"><block var="result"/><l>256</l></block></block><block s="doSetVar"><l>right_tracker</l><block s="reportRound"><block s="reportQuotient"><block var="result"/><l>256</l></block></block></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>FALSE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><l>TRUE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportEquals"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><l>TRUE</l></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0"></custom-block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Choose-1.2-0-0-0 $left-1.2-0-0-0 $track-1.2-0-0-0 $ðŸ¡¼-3-255-0-0 $ã€°-3-0-0-0 $Y-3-0-0-0 $ã€°-3-0-0-0 $ðŸ¡­-2-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x39] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x39] = function(board) {&#xD;        var trackers = board.currentBuffer[2]  | (board.currentBuffer[3] &lt;&lt; 8) ;&#xD;        board.emit("trackers", trackers);&#xD;    };&#xD;}&#xD;board["trackers"] = null;&#xD;board.once("trackers", function(data){board["trackers"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x39,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("trackers");&#xD;return (board["trackers"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>result</l><l>left_tracker</l><l>right_tracker</l></list></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("trackers")&#xD;return board["trackers"].toString(10);</l></block><list></list></block></block><block s="doSetVar"><l>left_tracker</l><block s="reportModulus"><block var="result"/><l>256</l></block></block><block s="doSetVar"><l>right_tracker</l><block s="reportRound"><block s="reportQuotient"><block var="result"/><l>256</l></block></block></block><block s="doUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><block s="doUntil"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ²-3-255-0-0"></custom-block></script></block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0"></custom-block><block s="doWaitUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $Choose-1.2-0-0-0 $right-1.2-0-0-0 $track-1.2-0-0-0 $ðŸ¡¬-2-0-0-0 $ã€°-3-0-0-0 $Y-3-0-0-0 $ã€°-3-0-0-0 $ðŸ¡½-3-255-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x39] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x39] = function(board) {&#xD;        var trackers = board.currentBuffer[2]  | (board.currentBuffer[3] &lt;&lt; 8) ;&#xD;        board.emit("trackers", trackers);&#xD;    };&#xD;}&#xD;board["trackers"] = null;&#xD;board.once("trackers", function(data){board["trackers"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x39,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("trackers");&#xD;return (board["trackers"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>result</l><l>left_tracker</l><l>right_tracker</l></list></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("trackers")&#xD;return board["trackers"].toString(10);</l></block><list></list></block></block><block s="doSetVar"><l>left_tracker</l><block s="reportModulus"><block var="result"/><l>256</l></block></block><block s="doSetVar"><l>right_tracker</l><block s="reportRound"><block s="reportQuotient"><block var="result"/><l>256</l></block></block></block><block s="doUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><block s="doUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block></block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><block s="doUntil"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="left_tracker"/></custom-block><script><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Turn-1.2-0-0-0 $âŸ³-3-255-0-0"></custom-block></script></block><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ§’-1.4 $Stop-1.2-0-0-0 $.-1-0-0-0 $square-1.2-255-0-0"></custom-block><block s="doWaitUntil"><block s="reportNot"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $Line-1-0-0-0 $detected-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %n"><block var="right_tracker"/></custom-block></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸš™-1.7-0-0-0 $set-1-0-0-0 $servo-1-0-0-0 %&apos;number&apos; $to-1-0-0-0 %&apos;movement&apos; $at-1-0-0-0 $speed-1-0-0-0 %&apos;speed&apos;" type="command" category="Ody: Servos and DC Motors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%txt"><options>clockwise&#xD;counter-clockwise&#xD;stopped</options></input><input type="%n">10<options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>speed</l></list><l>var direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (speed &lt;0 || speed &gt;10)&#xD;   throw new Error("speed must be betwwen 0 and 10")</l></block><list><block var="speed"/></list></block><block s="doDeclareVariables"><list><l>modified_speed</l></list></block><block s="doDeclareVariables"><list><l>digital_pin</l></list></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>1</l></block><script><block s="doSetVar"><l>digital_pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>2</l></block><script><block s="doSetVar"><l>digital_pin</l><l>4</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>3</l></block><script><block s="doSetVar"><l>digital_pin</l><l>7</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>4</l></block><script><block s="doSetVar"><l>digital_pin</l><l>8</l></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="movement"/><l>stopped</l></block><script><block s="servoWrite"><block var="digital_pin"/><l><option>stopped</option></l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="movement"/><l>clockwise</l></block><script><block s="doSetVar"><l>modified_speed</l><block s="reportVariadicSum"><list><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></list></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script><script><block s="doSetVar"><l>modified_speed</l><block s="reportDifference"><l>1500</l><block s="reportVariadicProduct"><list><l>50</l><block var="speed"/></list></block></block></block><block s="servoWrite"><block var="digital_pin"/><block var="modified_speed"/></block></script></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸš™-1.7-0-0-0 $set-1-0-0-0 $servo-1-0-0-0 %&apos;number&apos; $to-1-0-0-0 %&apos;angle&apos; $degrees-1-0-0-0" type="command" category="Ody: Servos and DC Motors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n">90</input></inputs><script><block s="doDeclareVariables"><list><l>digital_pin</l></list></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>1</l></block><script><block s="doSetVar"><l>digital_pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>2</l></block><script><block s="doSetVar"><l>digital_pin</l><l>4</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>3</l></block><script><block s="doSetVar"><l>digital_pin</l><l>7</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="number"/><l>4</l></block><script><block s="doSetVar"><l>digital_pin</l><l>8</l></block></script></block><block s="servoWrite"><block var="digital_pin"/><block var="angle"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $matched-1-0-0-0 $fixed-1-0-0-0 $color-1-0-0-0 $within-1-0-0-0 $similarity-1-0-0-0 $frame-1-0-0-0 %&apos;frame&apos; $(0-1-0-0-0 $to-1-0-0-0 $100)-1-0-0-0 $-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>color</l><l>output</l></list></block><block s="doRun"><block s="reportJSFunction"><list><l>frame</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (frame &lt;0 || frame &gt;100)&#xD;   throw new Error("frame must be between 0 and 100")&#xD;&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x32] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x32] = function(board) {&#xD;       &#xD;            var value = board.currentBuffer[2];&#xD;            board.emit("RET_C_M_2", value)&#xD;        }&#xD;    };&#xD;&#xD;board["RET_C_M_2"] = null;&#xD;board.once("RET_C_M_2", function(data){board["RET_C_M_2"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x32,&#xD;   frame+0,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="frame"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_C_M_2");&#xD;return (board["RET_C_M_2"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>color</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_C_M_2");&#xD;return board["RET_C_M_2"];</l></block><list></list></block></block><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>0</l></block><script><block s="doSetVar"><l>output</l><l>Red</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>1</l></block><script><block s="doSetVar"><l>output</l><l>Green</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>2</l></block><script><block s="doSetVar"><l>output</l><l>Blue</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>3</l></block><script><block s="doSetVar"><l>output</l><l>Cyan</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>4</l></block><script><block s="doSetVar"><l>output</l><l>Yellow</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>5</l></block><script><block s="doSetVar"><l>output</l><l>Magenta</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>6</l></block><script><block s="doSetVar"><l>output</l><l>Floor</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>7</l></block><script><block s="doSetVar"><l>output</l><l>Black</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>8</l></block><script><block s="doSetVar"><l>output</l><l>White</l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="color"/><l>10</l></block><script><block s="doSetVar"><l>output</l><l>Color conflict:please reduce frame</l></block></script><script><block s="doSetVar"><l>output</l><l>Unknown</l></block></script></block></script></block></script></block></script></block></script></block></script></block></script></block></script></block></script></block></script></block><block s="doReport"><block var="output"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $RGB-1-0-0-0 $values-1-0-0-0 $detected-1-0-0-0 $by-1-0-0-0 $color-1-0-0-0 $sensor-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>detected_color</l><l>red</l><l>green</l><l>blue</l><l>RGB</l></list></block><block s="doSetVar"><l>RGB</l><block s="reportNewList"><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x23,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWait"><l>0.1</l></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x24] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x24] = function(board) {&#xD;  &#xD;           var red = 0; &#xD;           red = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_C-red", red);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_C-red"] = null;&#xD;board.once("RET_C-red", function(data){board["RET_C-red"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x24,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_C-red");&#xD;return (board["RET_C-red"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>red</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_C-red");&#xD;return board["RET_C-red"];</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x25] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x25] = function(board) {&#xD;  &#xD;           var green = 0; &#xD;           green = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_C-green", green);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_C-green"] = null;&#xD;board.once("RET_C-green", function(data){board["RET_C-green"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x25,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_C-green");&#xD;return (board["RET_C-green"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>green</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_C-green");&#xD;return board["RET_C-green"];</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x26] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x26] = function(board) {&#xD;  &#xD;           var blue = 0; &#xD;           blue = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_C-blue", blue);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_C-blue"] = null;&#xD;board.once("RET_C-blue", function(data){board["RET_C-blue"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x26,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_C-blue");&#xD;return (board["RET_C-blue"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>blue</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_C-blue");&#xD;return board["RET_C-blue"];</l></block><list></list></block></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Red = </l><block var="red"/></list></block><block var="RGB"/></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Green = </l><block var="green"/></list></block><block var="RGB"/></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Blue = </l><block var="blue"/></list></block><block var="RGB"/></block><block s="doReport"><block var="RGB"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $RGB-1-0-0-0 $values-1-0-0-0 $for-1-0-0-0 $fixed-1-0-0-0 %&apos;color&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>Red&#xD;Green&#xD;Blue&#xD;Cyan&#xD;Yellow&#xD;Magenta&#xD;Floor&#xD;Black&#xD;White</options></input></inputs><script><block s="doDeclareVariables"><list><l>red</l><l>green</l><l>blue</l><l>color_number</l><l>RGB</l></list></block><block s="doSetVar"><l>RGB</l><block s="reportNewList"><list></list></block></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Red</l></block><script><block s="doSetVar"><l>color_number</l><l>1</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Green</l></block><script><block s="doSetVar"><l>color_number</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Blue</l></block><script><block s="doSetVar"><l>color_number</l><l>3</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Cyan</l></block><script><block s="doSetVar"><l>color_number</l><l>4</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Yellow</l></block><script><block s="doSetVar"><l>color_number</l><l>5</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Magenta</l></block><script><block s="doSetVar"><l>color_number</l><l>6</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Floor</l></block><script><block s="doSetVar"><l>color_number</l><l>7</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>Black</l></block><script><block s="doSetVar"><l>color_number</l><l>8</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>White</l></block><script><block s="doSetVar"><l>color_number</l><l>9</l></block></script></block><block s="doRun"><block s="reportJSFunction"><list><l>color_number</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x28] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x28] = function(board) {&#xD;  &#xD;           var red = 0; &#xD;           red = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_S-red", red);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_S-red"] = null;&#xD;board.once("RET_S-red", function(data){board["RET_S-red"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x28,&#xD;    color_number &amp; 0x7F,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="color_number"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_S-red");&#xD;return (board["RET_S-red"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>red</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_S-red");&#xD;return board["RET_S-red"];</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>color_number</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x29] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x29] = function(board) {&#xD;  &#xD;           var green = 0; &#xD;           green = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_S-green", green);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_S-green"] = null;&#xD;board.once("RET_S-green", function(data){board["RET_S-green"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x29,&#xD;    color_number &amp; 0x7F,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="color_number"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_S-green");&#xD;return (board["RET_S-green"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>green</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_S-green");&#xD;return board["RET_S-green"];</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>color_number</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x30] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x30] = function(board) {&#xD;  &#xD;           var blue = 0; &#xD;           blue = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;           board.emit("RET_S-blue", blue);&#xD;        }&#xD;    };&#xD;&#xD;board["RET_S-blue"] = null;&#xD;board.once("RET_S-blue", function(data){board["RET_S-blue"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x30,&#xD;    color_number &amp; 0x7F,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="color_number"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("RET_S-blue");&#xD;return (board["RET_S-blue"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>blue</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("RET_S-blue");&#xD;return board["RET_S-blue"];</l></block><list></list></block></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Red = </l><block var="red"/></list></block><block var="RGB"/></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Green = </l><block var="green"/></list></block><block var="RGB"/></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Blue = </l><block var="blue"/></list></block><block var="RGB"/></block><block s="doReport"><block var="RGB"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $initialize-1-0-0-0 $color-1-0-0-0 $sensor-1-0-0-0" type="command" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x21,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script><scripts><script x="469.85546875" y="91.99999999999997"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $initialize-1-0-0-0 $SI1151-1-0-0-0 $Light-1-0-0-0 $sensor-1-0-0-0"></custom-block></script></scripts></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘‹-1.7-0-0-0 $actuator-0.8-0-0-0 $STORE-1.2-0-0-0 $actuator-1-0-0-0 $movement-1-0-0-0 $parameters-1-0-0-0 $(continuous-1-0-0-0 $servo)-1-0-0-0 $nl $SET-1.2-0-0-0 $actuator-1-0-0-0 %&apos;actuator_servo&apos; $to-1-0-0-0 $move-1-0-0-0 %&apos;servo_move_direction&apos; $for-1-0-0-0 %&apos;time&apos; $seconds.-1-0-0-0 $Reverse-1-0-0-0 $afterwards-1-0-0-0 %&apos;reverse&apos;" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>servo motor 1&#xD;servo motor 2&#xD;servo motor 3&#xD;servo motor 4</options></input><input type="%txt"><options>clockwise&#xD;counterclockwise</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>yes&#xD;no</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>actuator_servo</l><l>servo_move_direction</l><l>time</l><l>reverse</l></list><l>var move_direction_to_send, actuator_servo_to_send, servo_move_direction_to_send, reverse_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (time &gt;10)&#xD;  throw new Error("time must be at most 10 seconds")&#xD;//-----------------------------------------------------&#xD;if (actuator_servo == "servo motor 1")&#xD;   actuator_servo_to_send = 2;&#xD;else if (actuator_servo == "servo motor 2")&#xD;   actuator_servo_to_send = 4;&#xD;else if (actuator_servo == "servo motor 3")&#xD;   actuator_servo_to_send = 7; &#xD;else&#xD;   actuator_servo_to_send = 8;  &#xD;//----------------------------------------------------&#xD;if (servo_move_direction == "clockwise")&#xD;    servo_move_direction_to_send = 1;&#xD;else&#xD;    servo_move_direction_to_send = 2;&#xD;//---------------------------------------------------&#xD;&#xD;if (reverse == "yes")&#xD;    reverse_to_send = 1;&#xD;else&#xD;    reverse_to_send = 2;&#xD;&#xD;//-----------------------------------------------------&#xD;      &#xD;      &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x3C,  //grid Command &#xD;       		 actuator_servo_to_send,&#xD;          servo_move_direction_to_send,&#xD;          time,&#xD;          reverse_to_send,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="actuator_servo"/><block var="servo_move_direction"/><block var="time"/><block var="reverse"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘‹-1.7-0-0-0 $actuator-0.8-0-0-0 $STORE-1.2-0-0-0 $actuator-1-0-0-0 $movement-1-0-0-0 $parameters-1-0-0-0 $(angle-1-0-0-0 $servo)-1-0-0-0 $nl $SET-1.2-0-0-0 $actuator-1-0-0-0 %&apos;actuator_servo&apos; $|-1.2-0-0-0 $initial-1-0-0-0 $position-1-0-0-0 %&apos;initial_angle&apos; $(0-1-0-0-0 $to-1-0-0-0 $180)-1-0-0-0 $|-1.5-0-0-0 $-1.2-0-0-0 $target-1-0-0-0 $position-1-0-0-0 %&apos;target_angle&apos; $(0-1-0-0-0 $to-1-0-0-0 $180)-1-0-0-0 $nl $return-1-0-0-0 $to-1-0-0-0 $initial-1-0-0-0 $position-1-0-0-0-0 $after-1-0-0-0 %&apos;time_spent&apos; $seconds-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>servo motor 1&#xD;servo motor 2&#xD;servo motor 3&#xD;servo motor 4</options></input><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>actuator_servo</l><l>initial_angle</l><l>target_angle</l><l>time_spent</l></list><l>var move_direction_to_send, actuator_servo_to_send; &#xD;var initial_angle_lsb, initial_angle_msb, target_angle_lsb, target_angle_msb;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (initial_angle &lt;0 || initial_angle &gt;180)&#xD;   throw new Error("initial angle must be between 0 and 180")&#xD;if (target_angle &lt;0 || target_angle &gt;180)&#xD;   throw new Error("target angle must be between 0 and 180")&#xD;//-----------------------------------------------------&#xD;if (actuator_servo == "servo motor 1")&#xD;   actuator_servo_to_send = 2;&#xD;else if (actuator_servo == "servo motor 2")&#xD;   actuator_servo_to_send = 4;&#xD;else if (actuator_servo == "servo motor 3")&#xD;   actuator_servo_to_send = 7; &#xD;else&#xD;   actuator_servo_to_send = 8;  &#xD;//---------------------------------------------------&#xD;&#xD;initial_angle_lsb = initial_angle % 128;      &#xD;target_angle_lsb = target_angle % 128;&#xD;initial_angle_msb =Math.floor(initial_angle/128)&#xD;target_angle_msb =Math.floor(target_angle/128)&#xD;Math.floor(9 / 6)&#xD;&#xD;   &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x3D,  &#xD;       		 actuator_servo_to_send,&#xD;          initial_angle_lsb,&#xD;          initial_angle_msb,&#xD;          target_angle_lsb,&#xD;          target_angle_msb,&#xD;          time_spent,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="actuator_servo"/><block var="initial_angle"/><block var="target_angle"/><block var="time_spent"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸš™-1.7-0-0-0 $motors-0.8-0-0-0 $STORE-1.2-0-0-0 %&apos;move_direction&apos; $movement-1-0-0-0 $parameters-1-0-0-0 $nl $SET-1.2-0-0-0 $left-1-0-0-0 $wheel-1-0-0-0 %&apos;left&apos; $to-1-0-0-0 $direction-1-0-0-0 %&apos;servo_move_direction&apos; $speed-1-0-0-0 %&apos;speed&apos; $refine-1-0-0-0 %&apos;refinement_direction&apos; $value-1-0-0-0 %&apos;lvalue&apos; $(0-1-0-0-0 $to-1-0-0-0 $20)-1-0-0-0 $nl $SET-1.2-0-0-0 $right-1-0-0-0 $wheel-1-0-0-0 %&apos;right&apos; $to-1-0-0-0 $direction-1-0-0-0 %&apos;servo_2_move_direction&apos; $speed-1-0-0-0 %&apos;speed2&apos; $refine-1-0-0-0 %&apos;refienement_2_direction&apos; $value-1-0-0-0 %&apos;value2&apos; $(0-1-0-0-0 $to-1-0-0-0 $20)-1-0-0-0" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>forward&#xD;backward&#xD;left turn&#xD;right turn</options></input><input type="%txt"><options>servo motor 1&#xD;servo motor 2&#xD;servo motor 3&#xD;servo motor 4</options></input><input type="%txt"><options>clockwise&#xD;counterclockwise</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>upward&#xD;downward&#xD;none</options></input><input type="%n">0</input><input type="%txt"><options>servo motor 1&#xD;servo motor 2&#xD;servo motor 3&#xD;servo motor 4</options></input><input type="%txt"><options>clockwise&#xD;counterclockwise&#xD;none</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4&#xD;5&#xD;6&#xD;7&#xD;8&#xD;9&#xD;10</options></input><input type="%txt"><options>upward&#xD;downward&#xD;none</options></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>move_direction</l><l>value2</l><l>left</l><l>servo_move_direction</l><l>speed</l><l>refinement_direction</l><l>lvalue</l><l>right</l><l>servo_2_move_direction</l><l>speed2</l><l>refinement_2_direction</l></list><l>var move_direction_to_send, left_servo_to_send, right_servo_to_send, servo_move_direction_to_send;&#xD;var servo_2_move_direction_to_send, refinement_direction_to_send, refinement_2_direction_to_send;&#xD;var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;//-----------------------------------------------------&#xD;if (move_direction == "forward")&#xD;   move_direction_to_send = 1;&#xD;else if (move_direction == "backward")&#xD;   move_direction_to_send = 2;&#xD;else if (move_direction == "left turn")&#xD;   move_direction_to_send = 4;&#xD;else&#xD;   move_direction_to_send = 5;&#xD;//-----------------------------------------------------&#xD;if (left == "servo motor 1")&#xD;   left_servo_to_send = 2;&#xD;else if (left == "servo motor 2")&#xD;   left_servo_to_send = 4;&#xD;else if (left == "servo motor 3")&#xD;   left_servo_to_send = 7; &#xD;else&#xD;   left_servo_to_send = 8;  &#xD;//----------------------------------------------------&#xD;if (right == "servo motor 1")&#xD;   right_servo_to_send = 2;&#xD;else if (right == "servo motor 2")&#xD;   right_servo_to_send = 4;&#xD;else if (right == "servo motor 3")&#xD;   right_servo_to_send = 7; &#xD;else&#xD;   right_servo_to_send = 8;&#xD;//----------------------------------------------------&#xD;if (servo_move_direction == "clockwise")&#xD;    servo_move_direction_to_send = 1;&#xD;else&#xD;    servo_move_direction_to_send = 2;&#xD;//---------------------------------------------------&#xD;if (servo_2_move_direction == "clockwise")&#xD;    servo_2_move_direction_to_send = 1;&#xD;else&#xD;    servo_2_move_direction_to_send = 2;&#xD;//---------------------------------------------------&#xD;if (refinement_direction == "upward")&#xD;    refinement_direction_to_send = 1;&#xD;else if (refinement_direction == "downward")&#xD;    refinement_direction_to_send = 2;&#xD;else&#xD;    refinement_direction_to_send = 3;&#xD;//-----------------------------------------------------&#xD;if (refinement_2_direction == "upward")&#xD;    refinement_2_direction_to_send = 1;&#xD;else if (refinement_2_direction == "downward")&#xD;    refinement_2_direction_to_send = 2;&#xD;else&#xD;    refinement_2_direction_to_send = 3;&#xD;//-----------------------------------------------------&#xD;    &#xD;//if (left_servo_to_send == right_servo_to_send)&#xD;//    throw new Error("left wheel must not be identical to the right wheel");&#xD;//else &#xD;//{    &#xD;      &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x33,  //grid Command &#xD;       		 move_direction_to_send,&#xD;          left_servo_to_send,&#xD;          servo_move_direction_to_send,&#xD;          speed,&#xD;          refinement_direction_to_send,&#xD;          lvalue,&#xD;          right_servo_to_send,&#xD;          servo_2_move_direction_to_send,&#xD;        		speed2,&#xD;          refinement_2_direction_to_send,&#xD;          value2,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="move_direction"/><block var="value2"/><block var="left"/><block var="servo_move_direction"/><block var="speed"/><block var="refinement_direction"/><block var="lvalue"/><block var="right"/><block var="servo_2_move_direction"/><block var="speed2"/><block var="refienement_2_direction"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ§’-1.4 $move-1.2-0-0-0 $actuator-1.2-0-0-0 $ðŸ‘‹-1.7-0-0-0" type="command" category="Ody: Youngsters"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>data_list</l><l>pos_data</l></list></block><block s="doSetVar"><l>data_list</l><block s="reportNewList"><list></list></block></block><block s="doFor"><l>i</l><l>121</l><l>131</l><script><block s="doRun"><block s="reportJSFunction"><list><l>i</l></list><l>var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x36] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x36] = function(board) {&#xD;        var pos_value = board.currentBuffer[2];&#xD;        board.emit("pos_value", pos_value);&#xD;    };&#xD;}&#xD;board["pos_value"] = null;&#xD;board.once("pos_value", function(data){board["pos_value"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0x36,//IR recv command&#xD;    i,&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="i"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("pos_value");&#xD;return (board["pos_value"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>pos_data</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("pos_value")&#xD;return board["pos_value"].toString(10);</l></block><list></list></block></block><block s="doAddToList"><block var="pos_data"/><block var="data_list"/></block></script></block><block s="doIfElse"><block s="reportEquals"><block s="reportListItem"><l>1</l><block var="data_list"/></block><l>1</l></block><script><block s="doIfElse"><block s="reportEquals"><block s="reportListItem"><l>3</l><block var="data_list"/></block><l>1</l></block><script><block s="servoWrite"><block s="reportListItem"><l>2</l><block var="data_list"/></block><l><option>clockwise</option></l></block></script><script><block s="servoWrite"><block s="reportListItem"><l>2</l><block var="data_list"/></block><l><option>counter-clockwise</option></l></block></script></block><block s="doWait"><block s="reportListItem"><l>4</l><block var="data_list"/></block></block><block s="doIf"><block s="reportEquals"><block s="reportListItem"><l>5</l><block var="data_list"/></block><l>1</l></block><script><block s="doIfElse"><block s="reportEquals"><block s="reportListItem"><l>3</l><block var="data_list"/></block><l>1</l></block><script><block s="servoWrite"><block s="reportListItem"><l>2</l><block var="data_list"/></block><l><option>counter-clockwise</option></l></block></script><script><block s="servoWrite"><block s="reportListItem"><l>2</l><block var="data_list"/></block><l><option>clockwise</option></l></block></script></block><block s="doWait"><block s="reportListItem"><l>4</l><block var="data_list"/></block></block></script></block><block s="servoWrite"><block s="reportListItem"><l>2</l><block var="data_list"/></block><l><option>stopped</option></l></block></script><script><block s="servoWrite"><block s="reportListItem"><l>6</l><block var="data_list"/></block><block s="reportVariadicSum"><list><block s="reportVariadicProduct"><list><block s="reportListItem"><l>10</l><block var="data_list"/></block><l>128</l></list></block><block s="reportListItem"><l>9</l><block var="data_list"/></block></list></block></block><block s="doWait"><block s="reportListItem"><l>11</l><block var="data_list"/></block></block><block s="servoWrite"><block s="reportListItem"><l>6</l><block var="data_list"/></block><block s="reportVariadicSum"><list><block s="reportVariadicProduct"><list><block s="reportListItem"><l>8</l><block var="data_list"/></block><l>128</l></list></block><block s="reportListItem"><l>7</l><block var="data_list"/></block></list></block></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ”§-1.7-0-0-0 $ðŸ‘‹-1.7-0-0-0 $actuator-0.8-0-0-0 $STORE-1.2-0-0-0 $actuator-1-0-0-0 $(servo-1-0-0-0 $motor)-1-0-0-0 $type-1-0-0-0 $nl $SET-1.2-0-0-0 $actuator-1-0-0-0 $distance-1-0-0-0 $type-1-0-0-0 $as-1-0-0-0 %&apos;actuator_type&apos;" type="command" category="Ody: Configuration"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>continuous&#xD;angle</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>actuator_type</l></list><l>var left_tracker_slot_to_send, right_tracker_slot_to_send;&#xD;var board = this.arduino.board, type_to_send;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;if (actuator_type =="continuous")&#xD;   type_to_send = 1;&#xD;else&#xD;   type_to_send = 2;&#xD;&#xD;      &#xD;var sdata =[0xF0, //START_SYSEX&#xD;        		0x3E,  //grid Command &#xD;       		 type_to_send,&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));&#xD;</l></block><list><block var="actuator_type"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $Beep-1.2-0-0-0" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Create blocs wit vars: pin, freq (frequency 0-65535 Hz) and dur (duration 0-4294967295 milliseconds)&#xD;var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD; &#xD;var data =[0xF0, //START_SYSEX&#xD;		0x0D,  //Tone Command&#xD;		0x09,&#xD;		0xF7  //END_SYSEX&#xD;];&#xD;&#xD;board.transport.write(new Buffer(data));&#xD;</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Ultrasonic-1-0-0-0 $Sensor-1-0-0-0 $Measurement-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCB] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCB] = function(board) {&#xD;        var pulse = (board.currentBuffer[2] | (board.currentBuffer[3] &lt;&lt; 7));&#xD;        board.emit("us_distance", pulse);&#xD;    };&#xD;}&#xD;board["us_distance"] = null;&#xD;&#xD;board.once("us_distance", function(data){board["us_distance"] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xCB,  //ultrasonic distance command&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var pinRec = 11;&#xD;var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("us_distance");&#xD;return (board["us_distance"] != null);</l></block><list></list></block></block><block s="doDeclareVariables"><list><l>a</l></list></block><block s="doSetVar"><l>a</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("us_distance")&#xD;return board["us_distance"].toString(10);</l></block><list></list></block></block><block s="doIfElse"><block s="reportEquals"><block var="a"/><l>0</l></block><script><block s="doReport"><l>1000</l></block></script><script><block s="doReport"><block var="a"/></block></script></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Sharp-1-0-0-0 $IR-1-0-0-0 $sensor-1-0-0-0 $output-1-0-0-0 $(in-1-0-0-0 $volts)-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;slot_number&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>distance</l></list></block><block s="doSetVar"><l>distance</l><block s="reportAnalogReading"><block s="reportDifference"><block var="slot_number"/><l>1</l></block></block></block><block s="doSetVar"><l>distance</l><block s="reportQuotient"><block s="reportVariadicProduct"><list><block var="distance"/><l>5</l></list></block><l>1024</l></block></block><block s="doReport"><block var="distance"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Sharp-1-0-0-0 $IR-1-0-0-0 $sensor-1-0-0-0 $(product-1-0-0-0 $range-1-0-0-0 %&apos;range&apos; $)-1-0-0-0 $output-1-0-0-0 $(cm)-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;slot_number&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>10-150 cm&#xD;20-150 cm&#xD;10-80 cm&#xD;4-30 cm&#xD;2-15 cm</options></input><input type="%txt"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>10_150_x</l><l>10_150_y</l><l>20_150_x</l><l>20_150_y</l><l>10_80_x</l><l>10_80_y</l><l>4_30_x</l><l>4_30_y</l><l>tempx</l><l>tempy</l><l>output</l><l>volts</l><l>x1</l><l>x2</l><l>y1</l><l>y2</l><l>distance</l><l>2_15_x</l><l>2_15_y</l><l>a</l><l>b</l></list></block><block s="doSetVar"><l>10_150_x</l><block s="reportNewList"><list><l>150</l><l>75</l><l>25</l><l>10</l></list></block></block><block s="doSetVar"><l>10_150_y</l><block s="reportNewList"><list><l>0.65</l><l>0.8</l><l>1.45</l><l>3.6</l></list></block></block><block s="doSetVar"><l>20_150_x</l><block s="reportNewList"><list><l>150</l><l>75</l><l>25</l><l>20</l></list></block></block><block s="doSetVar"><l>20_150_y</l><block s="reportNewList"><list><l>0.45</l><l>0.8</l><l>2.2</l><l>2.75</l></list></block></block><block s="doSetVar"><l>10_80_x</l><block s="reportNewList"><list><l>80</l><l>40</l><l>20</l><l>10</l></list></block></block><block s="doSetVar"><l>10_80_y</l><block s="reportNewList"><list><l>0.45</l><l>0.75</l><l>1.35</l><l>2.5</l></list></block></block><block s="doSetVar"><l>4_30_x</l><block s="reportNewList"><list><l>40</l><l>20</l><l>10</l><l>4</l></list></block></block><block s="doSetVar"><l>4_30_y</l><block s="reportNewList"><list><l>0.3</l><l>0.65</l><l>1.25</l><l>2.8</l></list></block></block><block s="doSetVar"><l>2_15_x</l><block s="reportNewList"><list><l>20</l><l>10</l><l>5</l><l>1</l></list></block></block><block s="doSetVar"><l>2_15_y</l><block s="reportNewList"><list><l>0.3</l><l>0.60</l><l>1.05</l><l>2.45</l></list></block></block><block s="doIfElse"><block s="reportEquals"><block var="range"/><l>10-150 cm</l></block><script><block s="doSetVar"><l>tempx</l><block var="10_150_x"/></block><block s="doSetVar"><l>tempv</l><block var="10_150_y"/></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="range"/><l>20-150 cm</l></block><script><block s="doSetVar"><l>tempx</l><block var="20_150_x"/></block><block s="doSetVar"><l>tempy</l><block var="20_150_y"/></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="range"/><l>10-80 cm</l></block><script><block s="doSetVar"><l>tempx</l><block var="10_80_x"/></block><block s="doSetVar"><l>tempy</l><block var="10_80_y"/></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="range"/><l>4-30 cm</l></block><script><block s="doSetVar"><l>tempx</l><block var="4_30_x"/></block><block s="doSetVar"><l>tempy</l><block var="4_30_y"/></block></script><script><block s="doSetVar"><l>tempx</l><block var="2_15_x"/></block><block s="doSetVar"><l>tempy</l><block var="2_15_y"/></block></script></block></script></block></script></block></script></block><block s="doSetVar"><l>output</l><block s="reportAnalogReading"><block s="reportDifference"><block var="slot_number"/><l>1</l></block></block></block><block s="doSetVar"><l>volts</l><block s="reportQuotient"><block s="reportVariadicProduct"><list><block var="output"/><l>5</l></list></block><l>1024</l></block></block><block s="doIfElse"><block s="reportLessThan"><block var="volts"/><block s="reportListItem"><l>2</l><block var="tempy"/></block></block><script><block s="doSetVar"><l>x1</l><block s="reportListItem"><l>1</l><block var="tempx"/></block></block><block s="doSetVar"><l>x2</l><block s="reportListItem"><l>2</l><block var="tempx"/></block></block><block s="doSetVar"><l>y1</l><block s="reportListItem"><l>1</l><block var="tempy"/></block></block><block s="doSetVar"><l>y2</l><block s="reportListItem"><l>2</l><block var="tempy"/></block></block></script><script><block s="doIfElse"><block s="reportLessThan"><block var="volts"/><block s="reportListItem"><l>3</l><block var="tempy"/></block></block><script><block s="doSetVar"><l>x1</l><block s="reportListItem"><l>2</l><block var="tempx"/></block></block><block s="doSetVar"><l>x2</l><block s="reportListItem"><l>3</l><block var="tempx"/></block></block><block s="doSetVar"><l>y1</l><block s="reportListItem"><l>2</l><block var="tempy"/></block></block><block s="doSetVar"><l>y2</l><block s="reportListItem"><l>3</l><block var="tempy"/></block></block></script><script><block s="doSetVar"><l>x1</l><block s="reportListItem"><l>3</l><block var="tempx"/></block></block><block s="doSetVar"><l>x2</l><block s="reportListItem"><l>4</l><block var="tempx"/></block></block><block s="doSetVar"><l>y1</l><block s="reportListItem"><l>3</l><block var="tempy"/></block></block><block s="doSetVar"><l>y2</l><block s="reportListItem"><l>4</l><block var="tempy"/></block></block></script></block></script></block><block s="doSetVar"><l>a</l><block s="reportQuotient"><block s="reportDifference"><block var="y1"/><block var="y2"/></block><block s="reportDifference"><block var="x1"/><block var="x2"/></block></block></block><block s="doSetVar"><l>b</l><block s="reportQuotient"><block s="reportDifference"><block s="reportVariadicProduct"><list><block var="y1"/><block var="x2"/></list></block><block s="reportVariadicProduct"><list><block var="y2"/><block var="x1"/></list></block></block><block s="reportDifference"><block var="x2"/><block var="x1"/></block></block></block><block s="doSetVar"><l>distance</l><block s="reportQuotient"><block s="reportDifference"><block var="volts"/><block var="b"/></block><block var="a"/></block></block><block s="doReport"><block s="reportRound"><block var="distance"/></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Soil-1-0-0-0 $moisture-1-0-0-0 $sensor-1-0-0-0 $output-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;slot_number&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>moisture</l></list></block><block s="doSetVar"><l>moisture</l><block s="reportAnalogReading"><block s="reportDifference"><block var="slot_number"/><l>1</l></block></block></block><block s="doReport"><block var="moisture"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Soil-1-0-0-0 $moisture-1-0-0-0 $(0-1-0-0-0 $to-1-0-0-0 $100)-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;slot_number&apos; $nl $on-1-0-0-0 $dry-1-0-0-0 $soil-1-0-0-0 $value:-1-0-0-0 %&apos;dry_value&apos; $and-1-0-0-0 $water-1-0-0-0 $value-1-0-0-0 %&apos;water_value&apos; $-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>moisture</l><l>new_moisture</l></list></block><block s="doSetVar"><l>moisture</l><block s="reportAnalogReading"><block s="reportDifference"><block var="slot_number"/><l>1</l></block></block></block><block s="doSetVar"><l>new_moisture</l><block s="reportQuotient"><block s="reportVariadicProduct"><list><block s="reportDifference"><block var="moisture"/><block var="dry_value"/></block><l>100</l></list></block><block s="reportDifference"><block var="water_value"/><block var="dry_value"/></block></block></block><block s="doReport"><block s="reportRound"><block var="new_moisture"/></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Temperature-1-0-0-0 $/-1-0-0-0 $Humidity-1-0-0-0 $sensor-1-0-0-0 $DHT-1-0-0-0 %&apos;sensor_model&apos; $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;sensor_slot&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n">11<options>11&#xD;22&#xD;33&#xD;44</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>return_1</l><l>byte1</l><l>byte2</l><l>byte3</l><l>byte4</l><l>return1</l><l>byte5</l><l>return_2</l></list></block><block s="doSetVar"><l>return_2</l><block s="reportNewList"><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>sensor_model</l><l>sensor_slot</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x3F] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x3F] = function(board) {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14);&#xD;            board.emit("TH", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["TH"] = null;&#xD;board.once("TH", function(data){board["TH"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x3F,&#xD;    sensor_model,&#xD;    sensor_slot+0,&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="sensor_model"/><block var="sensor_slot"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("TH");&#xD;return (board["TH"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>return_1</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("TH");&#xD;return board["TH"];</l></block><list></list></block></block><block s="doSetVar"><l>byte1</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doSetVar"><l>return_1</l><block s="reportRound"><block s="reportQuotient"><block var="return_1"/><l>128</l></block></block></block><block s="doSetVar"><l>byte2</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doSetVar"><l>return_1</l><block s="reportRound"><block s="reportQuotient"><block var="return_1"/><l>128</l></block></block></block><block s="doSetVar"><l>byte3</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doIfElse"><block s="reportEquals"><block var="byte2"/><l>1</l></block><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Temperature : </l><block var="byte3"/><l> degrees Celsius</l></list></block><block var="return_2"/></block></script><script><block s="doAddToList"><block s="reportJoinWords"><list><l>Temperature : </l><block s="reportDifference"><l>0</l><block var="byte3"/></block><l> degrees Celsius</l></list></block><block var="return_2"/></block></script></block><block s="doAddToList"><block s="reportJoinWords"><list><l>Humidity : </l><block var="byte1"/><l> %</l></list></block><block var="return_2"/></block><block s="doReport"><block var="return_2"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Temperature-1-0-0-0 $(DHT-1-0-0-0 %&apos;sensor_model&apos; $)-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;sensor_slot&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n">11<options>11&#xD;22&#xD;33&#xD;44</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>return_1</l><l>byte1</l><l>byte2</l><l>byte3</l><l>byte4</l><l>return1</l><l>byte5</l><l>return_2</l></list></block><block s="doSetVar"><l>return_2</l><block s="reportNewList"><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>sensor_model</l><l>sensor_slot</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x3F] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x3F] = function(board) {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14);&#xD;            board.emit("TH", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["TH"] = null;&#xD;board.once("TH", function(data){board["TH"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x3F,&#xD;    sensor_model,&#xD;    sensor_slot+0,&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="sensor_model"/><block var="sensor_slot"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("TH");&#xD;return (board["TH"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>return_1</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("TH");&#xD;return board["TH"];</l></block><list></list></block></block><block s="doSetVar"><l>byte1</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doSetVar"><l>return_1</l><block s="reportRound"><block s="reportQuotient"><block var="return_1"/><l>128</l></block></block></block><block s="doSetVar"><l>byte2</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doSetVar"><l>return_1</l><block s="reportRound"><block s="reportQuotient"><block var="return_1"/><l>128</l></block></block></block><block s="doSetVar"><l>byte3</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doIfElse"><block s="reportEquals"><block var="byte2"/><l>1</l></block><script><block s="doSetVar"><l>return_2</l><block var="byte3"/></block></script><script><block s="doSetVar"><l>return_2</l><block s="reportDifference"><l>0</l><block var="byte3"/></block></block></script></block><block s="doReport"><block var="return_2"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $Humidity-1-0-0-0 $(DHT-1-0-0-0 %&apos;sensor_model&apos; $)-1-0-0-0 $at-1-0-0-0 $sensor-1-0-0-0 $slot-1-0-0-0 %&apos;sensor_slot&apos;" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs><input type="%n">11<options>11&#xD;22&#xD;33&#xD;44</options></input><input type="%n"><options>1&#xD;2&#xD;3&#xD;4</options></input></inputs><script><block s="doDeclareVariables"><list><l>return_1</l><l>byte1</l><l>byte2</l><l>byte3</l><l>byte4</l><l>return1</l><l>byte5</l><l>return_2</l></list></block><block s="doSetVar"><l>return_2</l><block s="reportNewList"><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>sensor_model</l><l>sensor_slot</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x3F] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x3F] = function(board) {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7) | ((board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 14);&#xD;            board.emit("TH", value);&#xD;        }&#xD; 	      &#xD;    };&#xD;&#xD;board["TH"] = null;&#xD;board.once("TH", function(data){board["TH"] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x3F,&#xD;    sensor_model,&#xD;    sensor_slot+0,&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="sensor_model"/><block var="sensor_slot"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("TH");&#xD;return (board["TH"] != null);</l></block><list></list></block></block><block s="doSetVar"><l>return_1</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("TH");&#xD;return board["TH"];</l></block><list></list></block></block><block s="doSetVar"><l>byte1</l><block s="reportModulus"><block var="return_1"/><l>128</l></block></block><block s="doReport"><block var="byte1"/></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $Play-1.2-0-0-0 $tone-1.2-0-0-0 %&apos;freq&apos; $Hertz-1.2-0-0-0 $for-1.2-0-0-0 %&apos;dur&apos; $miliseconds-1.2-0-0-0" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>freq</l><l>dur</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0x0B,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $Start-1.2-0-0-0 $tone-1.2-0-0-0 %&apos;freq&apos; $Hertz-1.2-0-0-0" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>freq</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;&#xD;var dur =  0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0x0B,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="freq"/></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $notes-1.7-0-0-0 $End-1.2-0-0-0 $tone-1.2-0-0-0" type="command" category="Ody: Images, sounds, leds"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;&#xD;var dur =  1000;&#xD;var freq = 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0x0B,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $initialize-1-0-0-0 $SI1151-1-0-0-0 $Light-1-0-0-0 $sensor-1-0-0-0" type="command" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;    0x41,	&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block></script><scripts><script x="469.85546875" y="91.99999999999997"><custom-block s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 %br $ðŸ‘€-1.7-0-0-0 $initialize-1-0-0-0 $SI1151-1-0-0-0 $Light-1-0-0-0 $sensor-1-0-0-0"></custom-block></script></scripts></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $(SI1151)-1-0-0-0 $Visible-1-0-0-0 $Light-1-0-0-0 $Measurement-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x51] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x51] = function(board) {&#xD;        var vlight = (board.currentBuffer[2] | (board.currentBuffer[3] &lt;&lt; 7));&#xD;        board.emit("groveSunlight", vlight);&#xD;    };&#xD;}&#xD;board["groveSunlight"] = null;&#xD;&#xD;board.once("groveSunlight", function(data){board["groveSunlight"] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0x51,  //IR light (ceeed grove si1151)&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("groveSunlight");&#xD;return (board["groveSunlight"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("groveSunlight")&#xD;return board["groveSunlight"].toString(10);</l></block><list></list></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $(SI1151)-1-0-0-0 $IR-1-0-0-0 $Light-1-0-0-0 $Measurement-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x41] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x41] = function(board) {&#xD;        var vlight = (board.currentBuffer[2] | (board.currentBuffer[3] &lt;&lt; 7));&#xD;        board.emit("groveSunlight", vlight);&#xD;    };&#xD;}&#xD;board["groveSunlight"] = null;&#xD;&#xD;board.once("groveSunlight", function(data){board["groveSunlight"] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0x41,  //IR light (ceeed grove si1151)&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("groveSunlight");&#xD;return (board["groveSunlight"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("groveSunlight")&#xD;return board["groveSunlight"].toString(10);</l></block><list></list></block></block></script></block-definition><block-definition s="$O-0.7-0-0-0 $D-0.7-153-0-76 $Y-0.7-153-76-0 $S-0.7-0-76-153 $S-0.7-76-0-153 $E-0.7-102-0-102 $U-0.7-153-0-0 $S-0.7-0-0-0 $.............-0-100-190 $gears-0.8-153-0-76 $__-0-0-0 $gears-0.8-153-0-76 $nl $ðŸ‘€-1.7-0-0-0 $(BH1750)-1-0-0-0 $Light-1-0-0-0 $Measurement-1-0-0-0" type="reporter" category="Ody: Sensors"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0x52] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0x52] = function(board) {&#xD;        var lux = (board.currentBuffer[2] | (board.currentBuffer[3] &lt;&lt; 7));&#xD;        board.emit("BH1750light", lux);&#xD;    };&#xD;}&#xD;board["BH1750light"] = null;&#xD;&#xD;board.once("BH1750light", function(data){board["BH1750light"] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0x52,  //light (BH1750)&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("BH1750light");&#xD;return (board["BH1750light"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("BH1750light")&#xD;return board["BH1750light"].toString(10);</l></block><list></list></block></block></script></block-definition></blocks>