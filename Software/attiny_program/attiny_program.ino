#include <TinyWireM.h>
#include <TinyWireS.h>
// I2C definitions
#define I2C_SDA         PB1                   // serial data pin
#define I2C_SCL         PB3                   // serial clock pin
#define LEFT_LED        PB4
#define I2C_SDA_HIGH()  DDRB &= ~(1<<I2C_SDA) // release SDA   -> pulled HIGH by resistor
#define I2C_SDA_LOW()   DDRB |=  (1<<I2C_SDA) // SDA as output -> pulled LOW  by MCU
#define I2C_SCL_HIGH()  DDRB &= ~(1<<I2C_SCL) // release SCL   -> pulled HIGH by resistor
#define I2C_SCL_LOW()   DDRB |=  (1<<I2C_SCL) // SCL as output -> pulled LOW  by MCU

// OLED definitions

#define OLED_ADDR       0x78        // OLED write address
#define OLED_CMD_MODE   0x00        // set command mode
#define OLED_DAT_MODE   0x40        // set data mode
#define OLED_INIT_LEN   25          // 12: no screen flip, 14: screen flip
#define I2C_SLAVE_ADDRESS 0x01       // Address of the slave
// I2C init function

volatile byte msg = 0, prev_msg = 0,error_msg = 0, OK_msg = 0, connected_msg = 0;
int left_blink = 0;
long left_blink_change_status;
int left_led_blink_status;
int right_blink = 0;
long right_blink_change_status;
int right_led_blink_status;
long connected_message_timer, error_message_timer, OK_message_timer;
int orientation;
uint8_t to_arduino;
void I2C_init(void) {
  DDRB  &= ~((1<<I2C_SDA)|(1<<I2C_SCL));  // pins as input (HIGH-Z) -> lines released
  PORTB &= ~((1<<I2C_SDA)|(1<<I2C_SCL));  // should be LOW when as ouput
}


// OLED init settings
const uint8_t OLED_INIT_CMD[] PROGMEM = {
      0xAE,           //Set display Off
      0xD5, 0x80,     //Set display clock divide ratio/oscillator frequency
      0xA8, 0x3F,     //Set multiplex ratio
      0xD3, 0x00,     //Set display offset
      0x40,           //Set display start line
      0x8D,           //Set charge pump
      0x14,           //VCC generated by internal DC/DC circuit
      0xA1,           //Set segment re-map 
      0xC0,           //Set COM output scan direction
      0xDA, 0x12,     //Set COM pins hardware configuration
      0x81, 0xCF,     //Set contrast control
      0xD9, 0xF1,     //Set pre-changed period
      0xDB, 0x40,     //Set VCOMH Deselected level
      0xA4,           //Set entire display on/off
      0xA6,           //Set normal/inverse display 
      0x20, 0x00,     //Set memory address mode
      0xAF            //Set display on
//  0xA8, 0x3F,       // set multiplex (HEIGHT-1): 0x1F for 128x32, 0x3F for 128x64 
 // 0x22, 0x00, 0x07, // set min and max page
 // 0x20, 0b00,       // set horizontal memory addressing mode
 // 0xDA, 0x02,       // set COM pins hardware configuration to sequential
 // 0x8D, 0x14,       // enable charge pump
//  
//  0xAF,             // switch on OLED
//  0x00,      // Set low nibble of column address
//  0x10,     // Set high nibble of column address
//  0x40,     // Set display start line address

};

// I2C start transmission


void I2C_start(uint8_t addr) {
  I2C_SDA_LOW();                          // start condition: SDA goes LOW first
  I2C_SCL_LOW();                          // start condition: SCL goes LOW second
  I2C_write(addr);                        // send slave address
}

// I2C stop transmission
void I2C_stop(void) {
  I2C_SDA_LOW();                          // prepare SDA for LOW to HIGH transition
  I2C_SCL_HIGH();                         // stop condition: SCL goes HIGH first
  I2C_SDA_HIGH();                         // stop condition: SDA goes HIGH second
}

// I2C transmit one data byte to the slave, ignore ACK bit, no clock stretching allowed
void I2C_write(uint8_t data) {
  for(uint8_t i = 8; i; i--) {            // transmit 8 bits, MSB first
    I2C_SDA_LOW();                        // SDA LOW for now (saves some flash this way)
    if (data & 0x80) I2C_SDA_HIGH();      // SDA HIGH if bit is 1
    I2C_SCL_HIGH();                       // clock HIGH -> slave reads the bit
    data<<=1;                             // shift left data byte, acts also as a delay
    I2C_SCL_LOW();                        // clock LOW again
  }
  I2C_SDA_HIGH();                         // release SDA for ACK bit of slave
  I2C_SCL_HIGH();                         // 9th clock pulse is for the ACK bit
  asm("nop");                             // ACK bit is ignored, just a delay
  I2C_SCL_LOW();                          // clock LOW again
}

// OLED init function
void OLED_init(void) {
  I2C_init();                       // initialize I2C first
  I2C_start(OLED_ADDR);             // start transmission to OLED
  I2C_write(OLED_CMD_MODE);         // set command mode
  for (uint8_t i = 0; i < OLED_INIT_LEN; i++) I2C_write(pgm_read_byte(&OLED_INIT_CMD[i])); // send the command bytes
  I2C_stop();                       // stop transmission
}
void OLED_cursor(uint8_t xpos, uint8_t ypos) {
  I2C_start(OLED_ADDR);             // start transmission to OLED
  I2C_write(OLED_CMD_MODE);         // set command mode
  I2C_write(xpos & 0x0F);           // set low nibble of start column
  I2C_write(0x10 | (xpos >> 4));    // set high nibble of start column
  I2C_write(0xB0 | (ypos & 0x07));  // set start page
  I2C_stop();                       // stop transmission
}

//-------------------------------------------------------------------------

//----------------------------------------------------------------------------

void print2_bitmap(uint8_t bitmap[]) {
  uint8_t bitmap_byte=0;
  uint8_t full_lines;
  uint8_t line_offset;
  uint16_t remaining_num_of_zeros = 0;
  uint16_t i=0;
  uint16_t j=0;
  uint16_t k=-1;
  while (j<1024)
   {
      if (j % 128 == 0)
      {
        I2C_stop();
        OLED_cursor(2, k);
        k++;
        I2C_start(OLED_ADDR);             // start transmission to OLED
        I2C_write(OLED_DAT_MODE);          // set command mode
      }
      if (remaining_num_of_zeros !=0)
      {
         I2C_write(0x00);
         remaining_num_of_zeros--;
         j++;
      }
      else
      {
          bitmap_byte = pgm_read_byte(&bitmap[i]);
          if (bitmap_byte != 0)
          {
            I2C_write(bitmap_byte);
            i++;
            j++;
          }
          else
          {
            full_lines = pgm_read_byte(&bitmap[++i]);
            line_offset = pgm_read_byte(&bitmap[++i]);
            remaining_num_of_zeros = full_lines*128+line_offset;
            i++;     
          }
      }
      
  }
 I2C_stop();
 OLED_cursor(0, 0);
}

//-------------------------------------------------------------------------
void  OLED_setRotation(uint8_t rotation) {
  uint8_t rotationBit = (rotation & 0x01);
  I2C_start(OLED_ADDR);             // start transmission to OLED
  I2C_write(OLED_CMD_MODE);         // set command mode
  I2C_write(0xC0 | (rotationBit << 3));
  I2C_write(0xA0 | rotationBit);
  I2C_stop();
}

 //----------------------------------------------------------------------- 
#include <Tiny4kOLED.h>
const uint8_t oddyseas[] PROGMEM = {0, 2, 42, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 26, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 86, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 26, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 93, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 2, 52};

const uint8_t empty_screen[] PROGMEM ={0,8,0};

const uint8_t ungry[] PROGMEM ={0, 1, 46, 32, 64, 128, 0, 0, 27, 128, 64, 32, 0, 0, 91, 248, 248, 248, 248, 248, 248, 248, 249, 2, 4, 8, 16, 32, 0, 0, 15, 32, 16, 8, 4, 2, 1, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 86, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 26, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 96, 128, 128, 64, 32, 32, 32, 16, 16, 16, 8, 8, 8, 16, 16, 16, 32, 32, 32, 64, 128, 128, 0, 0, 102, 4, 2, 2, 1, 1, 0, 0, 21, 1, 1, 2, 2, 4, 0, 2, 50};

const uint8_t smile[] PROGMEM ={0, 2, 42, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 26, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 86, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 26, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 91, 2, 4, 4, 8, 8, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 16, 16, 16, 16, 8, 8, 4, 4, 2, 0, 2, 51};

const uint8_t front_arrow[] PROGMEM ={0, 1, 57, 128, 192, 224, 240, 248, 252, 254, 255, 254, 252, 248, 240, 224, 192, 128, 0, 0, 110, 4, 6, 7, 7, 7, 7, 7, 7, 255, 255, 255, 255, 255, 7, 7, 7, 7, 7, 7, 6, 4, 0, 0, 115, 255, 255, 255, 255, 255, 0, 0, 123, 255, 255, 255, 255, 255, 0, 0, 123, 255, 255, 255, 255, 255, 0, 0, 123, 7, 7, 7, 7, 7, 0, 1, 61};

const uint8_t back_arrow[] PROGMEM ={0, 1, 62, 240, 240, 240, 240, 240, 0, 0, 123, 255, 255, 255, 255, 255, 0, 0, 123, 255, 255, 255, 255, 255, 0, 0, 123, 255, 255, 255, 255, 255, 0, 0, 115, 4, 12, 28, 60, 124, 252, 252, 252, 255, 255, 255, 255, 255, 252, 252, 252, 124, 60, 28, 12, 4, 0, 0, 113, 1, 3, 7, 15, 31, 15, 7, 3, 1, 0, 1, 59};

const uint8_t left_arrow[] PROGMEM ={0, 2, 36, 128, 192, 224, 240, 0, 0, 117, 64, 224, 240, 248, 252, 254, 255, 255, 255, 255, 255, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 63, 1, 3, 7, 15, 31, 63, 127, 255, 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 71, 1, 0, 2, 88};

const uint8_t right_arrow[] PROGMEM ={0, 2, 88, 240, 224, 192, 128, 0, 0, 66, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 255, 255, 255, 255, 255, 254, 252, 248, 240, 224, 64, 0, 0, 59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255, 255, 127, 63, 31, 15, 7, 3, 1, 0, 0, 119, 1, 0, 2, 39};

const uint8_t OK[] PROGMEM ={0, 1, 81, 128, 224, 240, 252, 254, 255, 127, 31, 14, 0, 0, 113, 128, 224, 240, 248, 254, 255, 127, 63, 15, 7, 3, 0, 0, 83, 14, 63, 255, 255, 254, 248, 224, 192, 0, 0, 20, 128, 192, 240, 248, 254, 255, 127, 63, 15, 7, 3, 0, 0, 92, 3, 7, 31, 127, 255, 255, 252, 240, 192, 0, 0, 10, 128, 192, 240, 248, 252, 255, 127, 63, 31, 7, 3, 1, 0, 0, 101, 1, 7, 31, 127, 255, 255, 254, 248, 224, 128, 192, 224, 248, 252, 255, 255, 63, 31, 15, 3, 1, 0, 0, 112, 3, 15, 31, 63, 63, 63, 31, 15, 3, 1, 0, 1, 65};

const uint8_t winging[] PROGMEM ={0, 2, 42, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 21, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 0, 0, 87, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 125, 2, 4, 4, 8, 8, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 160, 176, 208, 208, 208, 232, 232, 244, 244, 250, 0, 0, 119, 3, 15, 63, 127, 127, 127, 127, 63, 31, 0, 1, 51};

const uint8_t in_love[]PROGMEM ={0, 1, 35, 128, 224, 240, 240, 248, 248, 248, 240, 224, 192, 192, 224, 240, 248, 248, 248, 240, 240, 224, 128, 0, 0, 15, 128, 224, 240, 240, 248, 248, 248, 240, 224, 192, 192, 224, 240, 248, 248, 248, 240, 240, 224, 128, 0, 0, 73, 15, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 63, 15, 0, 0, 15, 15, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 63, 15, 0, 0, 76, 1, 3, 7, 7, 15, 31, 31, 31, 31, 15, 7, 7, 3, 1, 0, 0, 21, 1, 3, 7, 7, 15, 31, 31, 31, 31, 15, 7, 7, 3, 1, 0, 1, 88, 2, 4, 4, 8, 8, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 16, 16, 16, 16, 8, 8, 4, 4, 2, 0, 2, 51};

const uint8_t under_construction[]PROGMEM ={0, 1, 31, 254, 254, 254, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 254, 0, 0, 66, 255, 255, 255, 0, 0, 52, 248, 248, 248, 248, 248, 56, 59, 56, 56, 248, 248, 248, 248, 248, 0, 0, 59, 255, 255, 255, 0, 0, 52, 15, 15, 15, 15, 15, 14, 14, 14, 14, 15, 15, 15, 15, 15, 0, 0, 37, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 31, 31, 31, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 89, 224, 240, 248, 252, 254, 62, 62, 62, 254, 252, 252, 248, 224, 0, 0, 7, 224, 240, 248, 252, 254, 62, 62, 62, 254, 252, 252, 248, 224, 0, 0, 22, 255, 255, 255, 255, 255, 199, 199, 199, 199, 255, 255, 255, 255, 255, 0, 0, 59, 3, 15, 31, 31, 63, 62, 62, 62, 63, 31, 31, 15, 3, 0, 0, 7, 3, 15, 31, 31, 63, 62, 62, 62, 63, 31, 31, 15, 3, 0, 0, 22, 253, 253, 253, 253, 253, 29, 29, 29, 29, 253, 253, 253, 253, 253, 0, 0, 1, 252, 252, 252, 252, 252, 28, 28, 28, 28, 252, 252, 252, 252, 252, 0, 0, 1, 252, 252, 252, 252, 252, 28, 28, 28, 28, 252, 252, 252, 252, 252, 0, 0, 38, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 31, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 13};

const uint8_t program_deleted[]PROGMEM = {0, 1, 41, 224, 224, 96, 32, 32, 32, 96, 224, 224, 224, 224, 224, 224, 224, 0, 0, 1, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 0, 0, 1, 224, 224, 224, 224, 224, 224, 224, 96, 32, 32, 32, 96, 224, 224, 0, 0, 84, 191, 191, 188, 184, 176, 160, 128, 128, 0, 0, 1, 3, 7, 15, 15, 31, 0, 0, 1, 63, 191, 191, 191, 191, 184, 184, 184, 184, 191, 191, 191, 191, 63, 0, 0, 1, 31, 15, 7, 7, 3, 128, 128, 128, 160, 176, 184, 188, 191, 191, 0, 0, 84, 255, 255, 255, 255, 255, 227, 227, 227, 227, 255, 254, 252, 248, 240, 0, 0, 1, 192, 128, 1, 3, 7, 3, 3, 3, 3, 7, 3, 129, 128, 192, 0, 0, 1, 240, 248, 252, 254, 255, 227, 227, 227, 227, 255, 255, 255, 255, 255, 0, 0, 84, 254, 254, 254, 254, 254, 142, 142, 142, 142, 254, 126, 62, 30, 14, 0, 0, 1, 6, 2, 128, 128, 192, 128, 128, 128, 128, 192, 128, 0, 0, 1, 2, 6, 0, 0, 1, 30, 62, 126, 254, 254, 142, 142, 142, 142, 254, 254, 254, 254, 254, 0, 0, 84, 251, 123, 59, 27, 11, 3, 3, 3, 1, 128, 192, 224, 240, 248, 0, 0, 1, 250, 251, 251, 251, 251, 59, 59, 59, 59, 251, 251, 251, 250, 248, 0, 0, 1, 240, 240, 224, 192, 129, 1, 3, 3, 11, 27, 59, 251, 251, 251, 0, 0, 84, 15, 12, 8, 8, 8, 12, 14, 14, 14, 15, 15, 15, 15, 15, 0, 0, 1, 15, 15, 15, 15, 15, 14, 14, 14, 14, 15, 15, 15, 15, 15, 0, 0, 1, 15, 15, 15, 15, 15, 14, 14, 12, 12, 12, 14, 15, 15, 15, 0, 1, 43};

const uint8_t obstacle_detected[]PROGMEM ={0, 1, 34, 56, 126, 254, 255, 239, 255, 254, 126, 60, 0, 0, 40, 56, 126, 254, 255, 239, 255, 254, 126, 60, 0, 0, 66, 248, 120, 56, 24, 8, 8, 8, 15, 207, 239, 248, 120, 56, 8, 8, 8, 8, 136, 232, 248, 248, 120, 24, 8, 8, 8, 8, 200, 248, 248, 120, 56, 8, 8, 8, 8, 136, 232, 248, 248, 120, 24, 8, 8, 8, 8, 136, 232, 248, 120, 24, 8, 8, 8, 8, 136, 239, 255, 127, 24, 8, 8, 8, 8, 136, 248, 0, 0, 62, 15, 8, 8, 8, 8, 12, 14, 255, 255, 255, 9, 8, 8, 8, 8, 12, 14, 15, 15, 11, 8, 8, 8, 8, 8, 12, 15, 15, 15, 9, 8, 8, 8, 8, 12, 14, 15, 15, 11, 8, 8, 8, 8, 8, 12, 15, 15, 11, 8, 8, 8, 8, 8, 12, 15, 15, 251, 248, 248, 8, 8, 8, 12, 15, 15, 15, 0, 0, 62, 252, 60, 28, 12, 4, 4, 4, 135, 231, 247, 252, 60, 28, 4, 4, 4, 4, 196, 244, 252, 124, 60, 12, 4, 4, 4, 132, 228, 252, 252, 60, 28, 4, 4, 4, 4, 196, 244, 252, 124, 60, 12, 4, 4, 4, 132, 196, 244, 124, 60, 12, 4, 4, 4, 132, 196, 247, 127, 63, 12, 4, 4, 4, 132, 196, 252, 0, 0, 62, 7, 4, 4, 4, 4, 6, 7, 255, 255, 255, 4, 4, 4, 4, 4, 6, 7, 7, 7, 5, 4, 4, 4, 4, 4, 6, 7, 7, 7, 4, 4, 4, 4, 4, 6, 7, 7, 7, 5, 4, 4, 4, 4, 4, 6, 7, 7, 5, 4, 4, 4, 4, 4, 6, 7, 7, 253, 252, 252, 4, 4, 4, 6, 7, 7, 7, 0, 0, 65, 192, 192, 192, 192, 255, 255, 255, 192, 192, 192, 192, 0, 0, 38, 192, 192, 192, 192, 255, 255, 255, 192, 192, 192, 192, 0, 1, 35};

const uint8_t color_detected[]PROGMEM ={0, 1, 31, 224, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 224, 0, 0, 65, 255, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 255, 0, 0, 65, 255, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 42, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 255, 0, 0, 65, 255, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 42, 21, 10, 133, 194, 225, 240, 248, 252, 248, 240, 225, 194, 133, 10, 21, 42, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 255, 0, 0, 65, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 1, 1, 1, 1, 255, 255, 255, 255, 255, 1, 1, 1, 1, 0, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 92, 255, 255, 255, 255, 255, 0, 0, 123, 31, 31, 31, 31, 31, 0, 0, 65};

const uint8_t not_connected[]PROGMEM = {0, 1, 48, 128, 128, 128, 128, 0, 0, 16, 128, 128, 128, 128, 0, 0, 75, 128, 192, 224, 224, 240, 240, 248, 248, 248, 248, 248, 240, 240, 224, 224, 192, 128, 0, 0, 12, 7, 31, 63, 127, 255, 254, 252, 248, 240, 192, 128, 0, 0, 2, 128, 192, 224, 240, 252, 254, 255, 127, 31, 15, 7, 0, 0, 16, 128, 192, 192, 224, 224, 240, 240, 240, 240, 240, 224, 224, 192, 192, 128, 0, 0, 43, 124, 255, 255, 255, 255, 195, 129, 129, 0, 0, 4, 129, 195, 255, 255, 255, 255, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 56, 16, 0, 0, 1, 1, 131, 199, 239, 255, 255, 255, 255, 255, 255, 239, 135, 3, 1, 0, 0, 1, 16, 56, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 252, 255, 255, 255, 255, 135, 3, 3, 1, 1, 1, 1, 3, 135, 255, 255, 255, 255, 248, 0, 0, 42, 1, 3, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 7, 3, 1, 0, 0, 13, 224, 240, 248, 252, 255, 127, 63, 31, 7, 3, 1, 3, 7, 15, 31, 127, 255, 254, 252, 240, 224, 0, 0, 17, 3, 7, 15, 31, 31, 63, 63, 62, 62, 62, 62, 63, 31, 31, 15, 7, 3, 0, 0, 73, 1, 1, 1, 1, 0, 0, 13, 1, 1, 1, 1, 0, 2, 58};

const uint8_t connected_to_pc[]PROGMEM = {0, 2, 19, 128, 192, 224, 224, 240, 240, 248, 248, 248, 248, 248, 240, 240, 224, 224, 192, 128, 0, 0, 15, 240, 240, 240, 240, 48, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 128, 240, 240, 240, 240, 0, 0, 17, 128, 192, 192, 224, 224, 240, 240, 240, 240, 240, 224, 224, 192, 192, 128, 0, 0, 43, 124, 255, 255, 255, 255, 195, 129, 129, 0, 0, 4, 129, 195, 255, 255, 255, 255, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 255, 255, 255, 255, 56, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 131, 255, 255, 255, 255, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 252, 255, 255, 255, 255, 135, 3, 3, 1, 1, 1, 1, 3, 135, 255, 255, 255, 255, 248, 0, 0, 42, 1, 3, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 7, 3, 1, 0, 0, 15, 31, 31, 31, 31, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 3, 31, 31, 31, 31, 0, 0, 16, 3, 7, 15, 31, 31, 63, 63, 62, 62, 62, 62, 63, 31, 31, 15, 7, 3, 0, 3, 24};

const uint8_t oops[]PROGMEM = {0, 2, 31, 128, 192, 64, 64, 64, 64, 64, 192, 128, 0, 0, 12, 128, 192, 64, 64, 64, 64, 64, 192, 128, 0, 0, 10, 224, 224, 96, 96, 96, 96, 96, 96, 224, 192, 128, 0, 0, 7, 192, 224, 96, 96, 96, 96, 96, 96, 96, 0, 0, 10, 224, 224, 0, 0, 46, 248, 254, 7, 1, 0, 0, 1, 64, 64, 240, 64, 64, 0, 0, 1, 1, 7, 254, 248, 0, 0, 6, 248, 254, 7, 1, 0, 0, 1, 64, 64, 240, 64, 64, 0, 0, 1, 1, 7, 254, 248, 0, 0, 7, 255, 255, 192, 192, 192, 192, 192, 192, 255, 127, 63, 0, 0, 7, 63, 127, 96, 96, 96, 96, 96, 96, 224, 192, 0, 0, 9, 255, 255, 0, 0, 46, 1, 15, 24, 24, 48, 48, 32, 33, 32, 48, 48, 16, 28, 15, 1, 0, 0, 6, 1, 15, 24, 24, 48, 48, 32, 33, 32, 48, 48, 16, 28, 15, 1, 0, 0, 7, 63, 63, 0, 0, 17, 96, 96, 96, 96, 96, 96, 96, 48, 63, 15, 0, 0, 8, 207, 207, 0, 1, 48, 24, 24, 12, 12, 12, 6, 6, 6, 3, 3, 3, 6, 6, 12, 12, 24, 24, 48, 48, 32, 32, 48, 48, 24, 24, 12, 12, 6, 6, 3, 3, 0, 1, 67};

const uint8_t waiting[]PROGMEM = {0, 0, 45, 7, 31, 127, 255, 207, 143, 15, 15, 15, 15, 15, 143, 15, 15, 15, 15, 143, 15, 15, 15, 15, 15, 15, 207, 255, 255, 127, 31, 7, 0, 0, 102, 1, 7, 31, 127, 248, 243, 152, 126, 198, 177, 206, 191, 156, 242, 117, 168, 165, 244, 252, 126, 31, 7, 1, 0, 0, 76, 128, 192, 224, 224, 240, 240, 248, 248, 248, 248, 248, 240, 240, 224, 224, 192, 128, 0, 0, 16, 1, 7, 31, 254, 251, 194, 77, 3, 247, 129, 253, 254, 31, 7, 1, 0, 0, 21, 128, 192, 192, 224, 224, 240, 240, 240, 240, 240, 224, 224, 192, 192, 128, 0, 0, 43, 124, 255, 255, 255, 255, 195, 129, 129, 0, 0, 4, 129, 195, 255, 255, 255, 255, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 56, 16, 0, 0, 3, 1, 255, 255, 0, 0, 1, 75, 48, 255, 255, 1, 0, 0, 4, 16, 56, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 252, 255, 255, 255, 255, 135, 3, 3, 1, 1, 1, 1, 3, 135, 255, 255, 255, 255, 248, 0, 0, 42, 1, 3, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 7, 3, 1, 0, 0, 17, 128, 224, 254, 255, 7, 0, 0, 1, 55, 96, 7, 255, 254, 224, 128, 0, 0, 21, 3, 7, 15, 31, 31, 63, 63, 62, 62, 62, 62, 63, 31, 31, 15, 7, 3, 0, 0, 73, 128, 224, 248, 254, 63, 15, 3, 129, 0, 0, 2, 171, 136, 0, 0, 2, 1, 7, 63, 254, 248, 224, 128, 0, 0, 103, 128, 224, 248, 254, 255, 223, 211, 208, 208, 196, 208, 220, 205, 213, 222, 200, 219, 212, 208, 212, 248, 200, 195, 207, 255, 254, 248, 224, 128, 0, 0, 99, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 54};

const uint8_t waiting_2[]PROGMEM = {0, 1, 53, 128, 128, 128, 192, 192, 192, 192, 192, 192, 192, 192, 128, 128, 128, 0, 0, 80, 128, 192, 224, 224, 240, 240, 248, 248, 248, 248, 248, 240, 240, 224, 224, 192, 128, 0, 0, 8, 128, 224, 240, 248, 252, 254, 254, 143, 7, 3, 179, 3, 1, 73, 161, 5, 161, 9, 161, 19, 67, 19, 3, 7, 143, 254, 254, 252, 248, 240, 224, 128, 0, 0, 12, 128, 192, 192, 224, 224, 240, 240, 240, 240, 240, 224, 224, 192, 192, 128, 0, 0, 43, 124, 255, 255, 255, 255, 195, 129, 129, 0, 0, 4, 129, 195, 255, 255, 255, 255, 124, 124, 124, 124, 124, 124, 124, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 252, 120, 49, 52, 0, 0, 1, 150, 33, 2, 49, 52, 121, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 124, 124, 124, 124, 124, 124, 124, 124, 124, 252, 255, 255, 255, 255, 135, 3, 3, 1, 1, 1, 1, 3, 135, 255, 255, 255, 255, 248, 0, 0, 42, 1, 3, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 7, 3, 1, 0, 0, 8, 7, 31, 63, 127, 255, 255, 255, 199, 131, 1, 128, 64, 128, 64, 16, 66, 148, 32, 64, 128, 0, 0, 2, 1, 131, 199, 255, 255, 255, 127, 63, 31, 7, 0, 0, 11, 3, 7, 15, 31, 31, 63, 63, 62, 62, 62, 62, 63, 31, 31, 15, 7, 3, 0, 0, 73, 1, 1, 3, 3, 7, 6, 6, 14, 14, 15, 14, 14, 14, 15, 14, 7, 6, 7, 3, 3, 3, 1, 0, 2, 57};


void requestISR() 
{
     TinyWireS.write(to_arduino);
}
void setup()
{
   OLED_init();
   orientation = 1;
   // initialize the OLED
   OLED_setRotation(orientation);
   TinyWireS.begin(I2C_SLAVE_ADDRESS); // join i2c network
   TinyWireS.onRequest(requestISR);                                                                    
   pinMode(PB4, OUTPUT);
   pinMode(PB5, OUTPUT);
   print2_bitmap(not_connected);
   to_arduino = 0;
}

void loop()
{
  if(TinyWireS.available())
  {
    msg=TinyWireS.read();
    if(msg == 2)
       print2_bitmap(empty_screen);
    else if(msg == 3)
       print2_bitmap(oddyseas);
    else if (msg == 4)
       print2_bitmap(ungry);
    else if (msg == 5)
       print2_bitmap(smile);
    else if (msg == 6)
       print2_bitmap(in_love);
    else if (msg == 7)
       print2_bitmap(winging);
    else if (msg == 8)
       print2_bitmap(front_arrow);
    else if (msg == 9)
       print2_bitmap(back_arrow);
    else if (msg == 10)
       print2_bitmap(left_arrow);
    else if (msg == 11)
       print2_bitmap(right_arrow);
    else if (msg == 12)
       print2_bitmap(OK);
    else if (msg == 13)
       print2_bitmap(under_construction); 
    else if (msg == 14)
       print2_bitmap(program_deleted);     
    else if (msg == 15)
    {  digitalWrite(PB4,0);
       left_blink = 0;}
    else if (msg == 16)
    {  digitalWrite(PB4,1);
       left_blink = 0;}
    else if (msg == 17)
    {
      left_blink = 1;
      left_blink_change_status = 0;
      if (left_led_blink_status == 0){
      digitalWrite(PB4,1);
      left_led_blink_status = 1;
      }   
    }
    else if (msg == 18){
      digitalWrite(PB5,0);
      right_blink = 0;}
    else if (msg == 19){
      digitalWrite(PB5,1);
      right_blink = 0;}
    else if (msg == 20)
    {
      right_blink = 1;
      right_blink_change_status = 0;
      if (right_led_blink_status == 0){
      digitalWrite(PB5,1);
      right_led_blink_status = 1;
      }   
    }
    else if (msg == 21)
       print2_bitmap(obstacle_detected); 
    else if (msg == 22)
       print2_bitmap(color_detected);
    else if(msg == 23)
    {
       to_arduino = 0;
       print2_bitmap(not_connected); 
    }
    else if(msg == 24)
    {
       to_arduino = 2;
       print2_bitmap(connected_to_pc);
    }
    
    else if(msg == 25)
    {
      print2_bitmap(oops);
    }  
    else if (msg == 26)
    {
      print2_bitmap(OK);
    } 
    else if (msg == 27)
    {
      if (orientation == 1)
      {
        orientation = 0;
        OLED_setRotation(orientation);
     //   TinyWireS.begin(I2C_SLAVE_ADDRESS);
        print2_bitmap(oddyseas);
      }
      else
      {
        orientation = 1;
        OLED_setRotation(orientation);
     //   TinyWireS.begin(I2C_SLAVE_ADDRESS);
        print2_bitmap(oddyseas);
      }  
    } 
    else if (msg == 28)
      {
        // TinyWireS.write(1);
        // TinyWireS.write(to_arduino);
      }
      else if (msg == 29)
      {
        to_arduino = 1;
        print2_bitmap(waiting);
      }
      
  }
   TinyWireS_stop_check();
  if (left_blink == 1)
  {
    left_blink_change_status = left_blink_change_status+1;
    if (left_blink_change_status >=7000)
    {
      if (left_led_blink_status == 0)
      {
         digitalWrite(PB4,1);
        left_led_blink_status = 1;
        left_blink_change_status = 0;
      }
      else
      {
        digitalWrite(PB4,0);
        left_led_blink_status = 0;
        left_blink_change_status = 0;
      }
    }
  }
   if (right_blink == 1)
  {
    right_blink_change_status = right_blink_change_status+1;
    if (right_blink_change_status >=7000)
    {
      if (right_led_blink_status == 0)
      {
         digitalWrite(PB5,1);
        right_led_blink_status = 1;
        right_blink_change_status = 0;
      }
      else
      {
        digitalWrite(PB5,0);
        right_led_blink_status = 0;
        right_blink_change_status = 0;
      }
    }
  }
}
  
  
